{"version":3,"sources":["Components/FileCard/FileCard.module.css","Components/InputToClipboard/InputToClipboard.module.css","Components/ShareHost/ShareHost.module.css","Components/Header/Header.module.css","Components/AddFileCard/AddFileCard.module.css","Components/FileInput/FileInput.module.css","Components/ShareClient/ShareClient.module.css","Pages/Home/Home.module.css","Components/FileList/FileList.module.css","lib/helpers/classnames.tsx","lib/helpers/tryParseJSON.ts","lib/helpers/mapObject.ts","lib/helpers/formatFileData.ts","lib/helpers/saveFile.ts","lib/helpers/wait.ts","lib/redux/action/actions.ts","lib/helpers/generateFileId.ts","lib/redux/action/types.ts","lib/redux/reducer/connection.ts","lib/redux/reducer/hostFiles.ts","lib/redux/reducer/clientFiles.ts","lib/redux/reducer/index.ts","lib/redux/store.ts","Components/FileInput/index.tsx","Components/FileInput/FileInput.tsx","lib/webrtc/WebRTCConnection.ts","lib/webrtc/WebRTCFileChannel.ts","lib/webrtc/WebRTCWithFileChannel.ts","lib/firebase/firebase.ts","lib/firebase/FirestoreConnection.ts","Pages/Home/index.tsx","Pages/Home/Home.tsx","Components/InputToClipboard/index.ts","Components/InputToClipboard/InputToClipboard.tsx","Components/FileCard/index.ts","Components/FileCard/FileCard.tsx","Components/FileList/index.ts","Components/FileList/FileList.tsx","Components/Header/index.ts","Components/Header/Header.tsx","Components/AddFileCard/index.ts","Components/AddFileCard/AddFileCard.tsx","Components/ShareHost/index.ts","Components/ShareHost/ShareHost.tsx","Containers/ShareHost/index.ts","Containers/ShareHost/ShareHost.tsx","Components/ShareClient/index.ts","Components/ShareClient/ShareClient.tsx","Containers/ShareClient/index.ts","Containers/ShareClient/ShareClient.tsx","Pages/Share/index.tsx","Pages/Share/Share.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","classnames","classes","Array","isArray","join","Object","keys","filter","cn","tryParseJSON","str","JSON","parse","mapObject","obj","cb","newObj","id","files","name","size","file","link","document","createElement","href","URL","createObjectURL","body","appendChild","download","click","window","revokeObjectURL","remove","ms","a","Promise","resolve","setTimeout","hostAddFiles","filesWithId","forEach","lastModified","generateFileId","type","payload","initState","isHost","combined","combineReducers","connection","state","action","hostFiles","clientFiles","downloadedSize","store","createStore","rootReducer","FileInput","onFileInput","noFocus","useState","isInDragMode","setIsInDragMode","dropzoneRef","useRef","handleDrop","useCallback","evt","preventDefault","dataTransfer","from","handleInput","target","useEffect","handleDragStart","handleDragEnd","current","addEventListener","removeEventListener","dropzoneClasses","css","input","inputActive","ref","className","onDragOver","onDrop","multiple","onChange","tabIndex","RTCPeerConnectionConfig","iceServers","urls","WebRTCConnection","config","messageChannel","onConnection","onMessage","msg","createOffer","onicecandidate","candidate","description","setLocalDescription","iceGatheringState","connect","descr","remote","RTCSessionDescription","setRemoteDescription","createAnswer","sendMessage","message","readyState","send","sendJSON","stringify","RTCPeerConnection","this","createDataChannel","onmessage","data","channel","label","console","log","iceConnectionState","localDescription","WebRTCFileChannel","onFileReady","info","onFileProgress","fileMessage","json","status","fileInfo","Blob","undefined","push","byteLength","downloaded","sendingFileQueue","sendFile","queue","length","_sendFile","offset","isStarted","reader","FileReader","onload","result","wait","onloadend","readAsArrayBuffer","slice","shift","WebRTCWithFileChannel","fileChannel","onFile","onRequestFile","_onMessage","asObj","requestFile","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FirestoreConnection","connections","doc","add","getOffer","get","response","offer","sendOffer","then","getAnswer","removeListener","onSnapshot","answer","sendAnswer","set","merge","firestore","collection","Home","addConnection","addFiles","history","useHistory","handleFileInput","firestoreCon","container","InputToClipboard","text","urlInput","inputGroup","readOnly","value","onFocus","select","autoFocus","btn","onClick","navigator","clipboard","focus","writeText","icon","xmlns","width","height","FileCard","progress","match","extention","toLowerCase","icons","includes","getIcon","card","card__icon","card__title","title","max","card__progress","FileList","onFileClick","appendComponent","list","map","key","Header","main","lead","header","header__heading","header__lead","AddFileCard","addFiles__caption","ShareHost","removeFile","urlBox","location","heading","formatFileData","handleAddFiles","handleRemoveFile","filesList","ShareClient","setDownloadProgress","saveFileData","saveFile","handleRequestFile","Share","clientSetConnection","useParams","replace","newConnection","firebaseConnection","Error","catch","App","path","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ee04043e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"FileCard_card__2LQTx\",\"card__icon\":\"FileCard_card__icon__3au0f\",\"icon\":\"FileCard_icon__2MZPN\",\"card__title\":\"FileCard_card__title__3F9SZ\",\"card__progress\":\"FileCard_card__progress__13gjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"InputToClipboard_inputGroup__1K_jF\",\"input\":\"InputToClipboard_input__aZxeq\",\"btn\":\"InputToClipboard_btn__13k-2\",\"icon\":\"InputToClipboard_icon__xv5Og\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareHost_heading__3e1Cg\",\"urlBox\":\"ShareHost_urlBox__qbpUI\",\"container\":\"ShareHost_container__3R05H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Q76hA\",\"header__heading\":\"Header_header__heading__BlGzf\",\"header__lead\":\"Header_header__lead__1jR8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addFiles\":\"AddFileCard_addFiles__1Cp53\",\"addFiles__caption\":\"AddFileCard_addFiles__caption__1oLnV\",\"icon\":\"AddFileCard_icon__2tDcj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FileInput_input__3v6pL\",\"inputActive\":\"FileInput_inputActive__3STcl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareClient_heading__VAHtz\",\"container\":\"ShareClient_container__22l9m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__q5gBo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FileList_list__3k0mc\"};","interface ClassObject {\r\n  [index: string]: boolean;\r\n}\r\n\r\nconst classnames = (classes: ClassObject | string[]) => {\r\n  if (Array.isArray(classes)) return classes.join(' ');\r\n\r\n  return Object.keys(classes)\r\n    .filter((cn) => classes[cn])\r\n    .join(' ');\r\n};\r\n\r\nexport default classnames;\r\n","const tryParseJSON = (str: string): any | null => {\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default tryParseJSON;\r\n","type Object = { [key: string]: any };\r\n\r\ntype Callback = (value?: any, key?: string, object?: Object) => any;\r\n\r\nconst mapObject = (obj: Object, cb: Callback) => {\r\n  const newObj: any = {};\r\n  for (const id in obj) {\r\n    newObj[id] = cb(obj[id], id, obj);\r\n  }\r\n  return newObj;\r\n};\r\n\r\nexport default mapObject;\r\n","import mapObject from './mapObject';\r\n\r\ntype FileInfo = { name: string; size: number };\r\n\r\nexport default (files: IHostFileStorage): FileInfo => {\r\n  return mapObject(files, ({ name, size }) => ({ name, size }));\r\n};\r\n","export default (file: Blob, name: string) => {\r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(file);\r\n  document.body.appendChild(link);\r\n  link.download = name;\r\n  link.click();\r\n  window.URL.revokeObjectURL(link.href);\r\n  link.remove();\r\n};\r\n","export default async (ms: number) =>\r\n  new Promise((resolve) => {\r\n    setTimeout(resolve, ms);\r\n  });\r\n","import { generateFileId } from 'lib/helpers';\r\n\r\nimport {\r\n  SET_CONNECTION,\r\n  HOST_ADD_FILES,\r\n  HOST_REMOVE_FILE,\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from './types';\r\n\r\nexport const hostSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: true, connection },\r\n});\r\nexport const clientSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: false, connection },\r\n});\r\n\r\nexport const hostAddFiles = (files: File[]): IHostAddFilesAction => {\r\n  const filesWithId: { [key: string]: File } = {};\r\n  files.forEach((file) => (filesWithId[generateFileId(file)] = file));\r\n\r\n  return { type: HOST_ADD_FILES, payload: filesWithId };\r\n};\r\nexport const clientAddFiles = (files: IClientFileStorage): IClientAddFilesAction => ({\r\n  type: CLIENT_ADD_FILES,\r\n  payload: files,\r\n});\r\n\r\nexport const hostRemoveFile = (id: string): IHostRemoveFileAction => ({\r\n  type: HOST_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\nexport const clientRemoveFile = (id: string): IClientRemoveFileAction => ({\r\n  type: CLIENT_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\n\r\nexport const setDownloadProgress = (id: string, size: number): IClientDownloadProgressAction => ({\r\n  type: SET_DOWNLOAD_PROGRESS,\r\n  payload: { id, downloadedSize: size },\r\n});\r\nexport const saveFileData = (id: string, file: Blob): IClientSaveFileDataAction => ({\r\n  type: SAVE_FILE_DATA,\r\n  payload: { id, file },\r\n});\r\n","export default (file: File) => `${file.lastModified}${file.size}${file.name}`;\r\n","export const HOST_ADD_FILES = 'HOST_ADD_FILES';\r\nexport const HOST_REMOVE_FILE = 'HOST_REMOVE_FILE';\r\n\r\nexport const CLIENT_ADD_FILES = 'CLIENT_ADD_FILES';\r\nexport const CLIENT_REMOVE_FILE = 'CLIENT_REMOVE_FILE';\r\n\r\nexport const SET_CONNECTION = 'SET_CONNECTION';\r\n\r\nexport const SET_DOWNLOAD_PROGRESS = 'SET_DOWNLOAD_PROGRESS';\r\nexport const SAVE_FILE_DATA = 'SAVE_FILE_DATA';\r\n","import { SET_CONNECTION } from '../action';\r\n\r\ninterface IConnectionInfo {\r\n  isHost: boolean;\r\n  connection?: WebRTCWithFileChannel;\r\n}\r\n\r\ndeclare global {\r\n  interface IConnectionAction {\r\n    type: typeof SET_CONNECTION;\r\n    payload: IConnectionInfo;\r\n  }\r\n}\r\n\r\nconst initState: IConnectionInfo = {\r\n  isHost: false,\r\n};\r\n\r\nexport default (state: IConnectionInfo = initState, action: IConnectionAction): IConnectionInfo => {\r\n  switch (action.type) {\r\n    case SET_CONNECTION:\r\n      return { ...state, ...action.payload };\r\n  }\r\n  return state;\r\n};\r\n","import { HOST_ADD_FILES, HOST_REMOVE_FILE } from '../action';\r\n\r\ndeclare global {\r\n  interface IHostFileStorage {\r\n    [key: string]: File;\r\n  }\r\n  interface IHostAddFilesAction {\r\n    type: typeof HOST_ADD_FILES;\r\n    payload: IHostFileStorage;\r\n  }\r\n  interface IHostRemoveFileAction {\r\n    type: typeof HOST_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n}\r\ntype Action = IHostAddFilesAction | IHostRemoveFileAction;\r\n\r\nconst initState: IHostFileStorage = {};\r\n\r\nexport default (state: IHostFileStorage = initState, action: Action): IHostFileStorage => {\r\n  switch (action.type) {\r\n    case HOST_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case HOST_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n  }\r\n  return state;\r\n};\r\n","import {\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from '../action';\r\n\r\ndeclare global {\r\n  interface IClientFileStorage {\r\n    [key: string]: {\r\n      name: string;\r\n      size: number;\r\n      downloadedSize?: number;\r\n      file?: Blob;\r\n    };\r\n  }\r\n  interface IClientAddFilesAction {\r\n    type: typeof CLIENT_ADD_FILES;\r\n    payload: IClientFileStorage;\r\n  }\r\n  interface IClientRemoveFileAction {\r\n    type: typeof CLIENT_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n  interface IClientDownloadProgressAction {\r\n    type: typeof SET_DOWNLOAD_PROGRESS;\r\n    payload: { id: string; downloadedSize: number };\r\n  }\r\n  interface IClientSaveFileDataAction {\r\n    type: typeof SAVE_FILE_DATA;\r\n    payload: { id: string; file: Blob };\r\n  }\r\n}\r\n\r\ntype Action =\r\n  | IClientAddFilesAction\r\n  | IClientRemoveFileAction\r\n  | IClientDownloadProgressAction\r\n  | IClientSaveFileDataAction;\r\n\r\nconst initState: IClientFileStorage = {};\r\n\r\nexport default (state: IClientFileStorage = initState, action: Action): IClientFileStorage => {\r\n  switch (action.type) {\r\n    case CLIENT_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case CLIENT_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n    case SET_DOWNLOAD_PROGRESS: {\r\n      const files = { ...state };\r\n      files[action.payload.id].downloadedSize = action.payload.downloadedSize;\r\n      return files;\r\n    }\r\n    case SAVE_FILE_DATA: {\r\n      const files = { ...state };\r\n      files[action.payload.id].file = action.payload.file;\r\n      return files;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport connection from './connection';\r\nimport hostFiles from './hostFiles';\r\nimport clientFiles from './clientFiles';\r\n\r\nconst combined = combineReducers({ connection, hostFiles, clientFiles });\r\n\r\ndeclare global {\r\n  type ReduxStore = ReturnType<typeof combined>;\r\n}\r\n\r\nexport default combined;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import FileInput from './FileInput';\r\n\r\nexport default FileInput;\r\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport css from './FileInput.module.css';\r\n\r\nimport { classnames } from 'lib/helpers';\r\n\r\ninterface IFileInputProps {\r\n  onFileInput: (files: File[]) => void;\r\n  noFocus?: boolean;\r\n}\r\n\r\ntype InputFileChangeEvent = React.ChangeEvent<HTMLInputElement>;\r\n\r\nconst FileInput: React.FC<IFileInputProps> = ({ onFileInput, noFocus }) => {\r\n  const [isInDragMode, setIsInDragMode] = useState(false);\r\n  const dropzoneRef = useRef<HTMLDivElement>(null);\r\n\r\n  const handleDrop = useCallback(\r\n    (evt: React.DragEvent) => {\r\n      evt.preventDefault();\r\n      setIsInDragMode(false);\r\n\r\n      const files = evt.dataTransfer.files;\r\n      if (files) onFileInput(Array.from(files));\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  const handleInput = useCallback(\r\n    (evt: InputFileChangeEvent) => {\r\n      const files = evt.target.files;\r\n      if (files) onFileInput(Array.from(files));\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleDragStart = () => setIsInDragMode(true);\r\n    const handleDragEnd = (evt: DragEvent) => {\r\n      if (evt.target === dropzoneRef.current) setIsInDragMode(false);\r\n    };\r\n\r\n    window.addEventListener('dragenter', handleDragStart);\r\n    window.addEventListener('dragleave', handleDragEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('dragenter', handleDragStart);\r\n      window.removeEventListener('dragleave', handleDragEnd);\r\n    };\r\n  }, []);\r\n\r\n  const dropzoneClasses = {\r\n    [css.input]: true,\r\n    [css.inputActive]: isInDragMode,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={dropzoneRef}\r\n      className={classnames(dropzoneClasses)}\r\n      onDragOver={(evt) => evt.preventDefault()}\r\n      onDrop={handleDrop}>\r\n      <input\r\n        type=\"file\"\r\n        name=\"files\"\r\n        className=\"visually-hidden\"\r\n        multiple\r\n        onChange={handleInput}\r\n        tabIndex={noFocus ? -1 : 0}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileInput;\r\n","const RTCPeerConnectionConfig: RTCConfiguration = {\r\n  iceServers: [\r\n    { urls: ['stun:stun.l.google.com:19302'] },\r\n    { urls: ['stun:stun1.l.google.com:19302'] },\r\n    { urls: ['stun:stun2.l.google.com:19302'] },\r\n    { urls: ['stun:stun3.l.google.com:19302'] },\r\n    { urls: ['stun:stun4.l.google.com:19302'] },\r\n    { urls: ['stun:stun.voipstunt.com'] },\r\n    // {\r\n    //   urls: ['turn:numb.viagenie.ca'],\r\n    //   credential: 'pahigan413',\r\n    //   username: 'pahigan413@lagsixtome.com',\r\n    //   credentialType: 'password',\r\n    // },\r\n  ],\r\n};\r\n\r\nclass WebRTCConnection {\r\n  connection: RTCPeerConnection;\r\n  messageChannel: RTCDataChannel;\r\n  onConnection = () => {};\r\n  onMessage = (msg: string) => {};\r\n\r\n  constructor(config: RTCConfiguration = RTCPeerConnectionConfig) {\r\n    const connection = new RTCPeerConnection(config);\r\n    this.connection = connection;\r\n\r\n    const messageChannel = connection.createDataChannel('message');\r\n\r\n    this.messageChannel = messageChannel;\r\n\r\n    messageChannel.onmessage = (evt) => this.onMessage(evt.data);\r\n\r\n    connection.addEventListener('datachannel', ({ channel }) => {\r\n      if (channel.label === 'message') this.messageChannel = channel;\r\n    });\r\n    connection.addEventListener('iceconnectionstatechange', () => {\r\n      console.log(connection.iceConnectionState);\r\n      if (connection.iceConnectionState !== 'connected') return;\r\n      this.onConnection();\r\n    });\r\n  }\r\n\r\n  get description() {\r\n    return JSON.stringify(this.connection.localDescription);\r\n  }\r\n\r\n  createOffer = () => {\r\n    const { connection } = this;\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n\r\n      await connection.setLocalDescription(await connection.createOffer());\r\n\r\n      setTimeout(() => {\r\n        connection.iceGatheringState !== 'complete' && resolve(this.description);\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  connect = (descr: string) => {\r\n    const { connection } = this;\r\n    const remote = new RTCSessionDescription(JSON.parse(descr));\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      await connection.setRemoteDescription(remote);\r\n\r\n      if (remote.type !== 'offer') return resolve();\r\n\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n      await connection.setLocalDescription(await connection.createAnswer());\r\n    });\r\n  };\r\n\r\n  sendMessage = (msg: string): void => {\r\n    const message = this.messageChannel;\r\n\r\n    if (message.readyState === 'open') return message.send(msg);\r\n    setTimeout(() => this.sendMessage(msg), 50);\r\n  };\r\n\r\n  sendJSON = (obj: object): void => {\r\n    this.sendMessage(JSON.stringify(obj));\r\n  };\r\n}\r\n\r\nexport default WebRTCConnection;\r\n","import { wait } from 'lib/helpers';\r\n\r\nexport type FileInfo = {\r\n  id: string;\r\n  name: string;\r\n  size: number;\r\n};\r\n\r\ntype FileData = FileInfo & {\r\n  downloadedSize: number;\r\n  data: ArrayBuffer[];\r\n};\r\n\r\ninterface IFileTransferInfo {\r\n  status: 'done' | 'new';\r\n  info?: FileInfo;\r\n}\r\n\r\nclass WebRTCFileChannel {\r\n  channel: RTCDataChannel;\r\n  private file: FileData | undefined;\r\n\r\n  onFileReady = (file: Blob, info: FileInfo): void => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n\r\n  constructor(connection: RTCPeerConnection, label: string) {\r\n    this.channel = connection.createDataChannel(label);\r\n    connection.addEventListener('datachannel', (evt) => {\r\n      if (evt.channel.label === label) this.channel = evt.channel;\r\n    });\r\n\r\n    this.channel.onmessage = (evt) => this.fileMessage(evt.data);\r\n  }\r\n\r\n  private fileMessage = (data: ArrayBuffer | string) => {\r\n    if (typeof data !== 'string') {\r\n      const file = this.file;\r\n\r\n      if (file) {\r\n        file.data.push(data);\r\n        file.downloadedSize += data.byteLength;\r\n        this.onFileProgress({\r\n          size: file.size,\r\n          downloaded: file.downloadedSize,\r\n          id: file.id,\r\n        });\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const json: IFileTransferInfo = JSON.parse(data);\r\n\r\n    if (json.status === 'new' && json.info) {\r\n      this.file = {\r\n        id: json.info.id,\r\n        name: json.info.name,\r\n        size: json.info.size,\r\n        downloadedSize: 0,\r\n        data: [],\r\n      };\r\n    } else if (json.status === 'done' && this.file) {\r\n      const fileInfo: FileInfo = {\r\n        id: this.file.id,\r\n        name: this.file.name,\r\n        size: this.file.size,\r\n      };\r\n      const file = new Blob(this.file.data);\r\n      this.onFileReady(file, fileInfo);\r\n      this.file = undefined;\r\n    }\r\n  };\r\n\r\n  private sendingFileQueue: {\r\n    file: File;\r\n    id: string;\r\n  }[] = [];\r\n  sendFile = (file: File, id: string) => {\r\n    const queue = this.sendingFileQueue;\r\n    queue.push({ file, id });\r\n\r\n    if (queue.length > 1) return;\r\n\r\n    this._sendFile();\r\n  };\r\n\r\n  private _sendFile = () => {\r\n    const queue = this.sendingFileQueue;\r\n    if (!queue.length) return;\r\n\r\n    const { file, id } = queue[0];\r\n    const chunkSize = 8 * 1024;\r\n\r\n    let offset = 0;\r\n    let isStarted = false;\r\n\r\n    const reader = new window.FileReader();\r\n    reader.onload = async () => {\r\n      if (!reader.result || typeof reader.result === 'string') return;\r\n\r\n      if (!isStarted) {\r\n        const info: IFileTransferInfo = {\r\n          status: 'new',\r\n          info: {\r\n            id,\r\n            name: file.name,\r\n            size: file.size,\r\n          },\r\n        };\r\n\r\n        this.channel.send(JSON.stringify(info));\r\n        isStarted = true;\r\n      }\r\n\r\n      while (this.channel.readyState !== 'open') {\r\n        await wait(10);\r\n        console.log(this.channel.readyState);\r\n      }\r\n\r\n      console.log('send file');\r\n      this.channel.send(reader.result);\r\n\r\n      offset += chunkSize;\r\n    };\r\n\r\n    reader.onloadend = () => {\r\n      if (offset < file.size) {\r\n        reader.readAsArrayBuffer(file.slice(offset, offset + chunkSize));\r\n      } else {\r\n        const info: IFileTransferInfo = { status: 'done' };\r\n        this.channel.send(JSON.stringify(info));\r\n        this.sendingFileQueue.shift();\r\n        this._sendFile();\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file.slice(offset, offset + chunkSize));\r\n  };\r\n}\r\n\r\nexport default WebRTCFileChannel;\r\n","import WebRTCConnection from './WebRTCConnection';\r\nimport WebRTCFileChannel, { FileInfo } from './WebRTCFileChannel';\r\n\r\nimport { tryParseJSON } from 'lib/helpers';\r\n\r\nclass WebRTCWithFileChannel extends WebRTCConnection {\r\n  fileChannel: WebRTCFileChannel;\r\n\r\n  onFile = (file: Blob, info: FileInfo) => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n  onRequestFile = (id: string): File | void => {};\r\n\r\n  constructor(config?: RTCConfiguration) {\r\n    super(config);\r\n\r\n    const fileChannel = new WebRTCFileChannel(this.connection, 'file');\r\n    this.fileChannel = fileChannel;\r\n\r\n    fileChannel.onFileReady = (file, info) => this.onFile(file, info);\r\n    fileChannel.onFileProgress = (info) => this.onFileProgress(info);\r\n\r\n    this.messageChannel.onmessage = this._onMessage;\r\n  }\r\n\r\n  private _onMessage = (evt: MessageEvent) => {\r\n    console.log(evt.data);\r\n    const asObj = tryParseJSON(evt.data);\r\n\r\n    if (asObj && asObj.action === 'sendFile') {\r\n      const file = this.onRequestFile(asObj.id);\r\n      if (file) this.sendFile(file, asObj.id);\r\n      return;\r\n    }\r\n\r\n    this.onMessage(evt.data);\r\n  };\r\n\r\n  sendFile = (file: File, id: string) => this.fileChannel.sendFile(file, id);\r\n\r\n  requestFile = (id: string) => {\r\n    this.sendJSON({ action: 'sendFile', id });\r\n  };\r\n}\r\n\r\nexport default WebRTCWithFileChannel;\r\n","import * as firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import firebase from './firebase';\r\n\r\ntype FirestoreConnections = firebase.firestore.CollectionReference<firebase.firestore.DocumentData>;\r\n\r\nclass FirestoreConnection {\r\n  private connections: FirestoreConnections;\r\n\r\n  constructor() {\r\n    this.connections = firebase.firestore().collection('connections');\r\n  }\r\n\r\n  private doc = (id: string) => this.connections.doc(id);\r\n  private add = (data: firebase.firestore.DocumentData) => this.connections.add(data);\r\n\r\n  getOffer = async (id: string): Promise<string | void> => {\r\n    const response = await this.doc(id).get();\r\n    const data = response.data();\r\n    if (data) return data.offer;\r\n  };\r\n\r\n  sendOffer = (offer: string) => this.add({ offer }).then(({ id }) => id);\r\n\r\n  getAnswer = (id: string) =>\r\n    new Promise<string>((resolve) => {\r\n      const removeListener = this.doc(id).onSnapshot((response) => {\r\n        const data = response.data();\r\n        if (!data || !data.answer) return;\r\n\r\n        resolve(data.answer);\r\n        removeListener();\r\n      });\r\n    });\r\n\r\n  sendAnswer = (id: string, answer: string) => this.doc(id).set({ answer }, { merge: true });\r\n}\r\n\r\nexport default FirestoreConnection;\r\n","import Home from './Home';\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport css from './Home.module.css';\r\n\r\nimport FileInput from 'Components/FileInput';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { hostAddFiles, hostSetConnection } from 'lib/redux';\r\n\r\ninterface IHomeProps {\r\n  addConnection: any;\r\n  addFiles: any;\r\n}\r\n\r\nconst Home: React.FC<IHomeProps> = ({ addConnection, addFiles }) => {\r\n  const history = useHistory();\r\n\r\n  const handleFileInput = async (files: File[]) => {\r\n    const connection = new WebRTCWithFileChannel();\r\n    addConnection(connection);\r\n    addFiles(files);\r\n\r\n    const firestoreCon = new FirestoreConnection();\r\n\r\n    const offer = await connection.createOffer();\r\n    const id = await firestoreCon.sendOffer(offer);\r\n\r\n    history.push(`/${id}`);\r\n    const answer = await firestoreCon.getAnswer(id);\r\n    connection.connect(answer);\r\n  };\r\n\r\n  return (\r\n    <label className={css.container}>\r\n      <h1>Add Files</h1>\r\n      <FileInput onFileInput={handleFileInput} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  addConnection: hostSetConnection,\r\n  addFiles: hostAddFiles,\r\n})(Home);\r\n","import InputToClipboard from './InputToClipboard';\r\n\r\nexport default InputToClipboard;\r\n","import React, { useRef } from 'react';\r\nimport css from './InputToClipboard.module.css';\r\n\r\ninterface IInputToClipboardProps {\r\n  text: string;\r\n}\r\n\r\nconst InputToClipboard: React.FC<IInputToClipboardProps> = ({ text }) => {\r\n  const urlInput = useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    if (!navigator.clipboard) {\r\n      return urlInput.current?.focus();\r\n    }\r\n\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  const handleInputFocus = (evt: React.FocusEvent<HTMLInputElement>) => evt.target.select();\r\n\r\n  return (\r\n    <div className={css.inputGroup}>\r\n      <input\r\n        ref={urlInput}\r\n        className={css.input}\r\n        readOnly\r\n        value={text}\r\n        onFocus={handleInputFocus}\r\n        autoFocus\r\n      />\r\n      <button className={css.btn} onClick={handleClick}>\r\n        <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\">\r\n          <use href=\"icons.svg#copy\" />\r\n        </svg>\r\n        Copy\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputToClipboard;\r\n","import FileCard from './FileCard';\r\n\r\nexport default FileCard;\r\n","import React from 'react';\r\nimport css from './FileCard.module.css';\r\n\r\ninterface IFileCardProps {\r\n  name: string;\r\n  id: string;\r\n  onClick?: (id: string) => void;\r\n  progress?: number;\r\n}\r\n\r\nconst getIcon = (extention: string) => {\r\n  extention = extention.toLowerCase();\r\n  const icons: { [key: string]: string[] } = {\r\n    'file-text': ['txt', 'doc', 'docx', 'rtf', 'odt'],\r\n    'file-picture': ['psd', 'tiff', 'tif', 'bmp', 'jpeg', 'jpg', 'gif', 'png', 'ico', 'webp', 'svg', 'eps', 'ai', 'heic', 'nef', 'crw', 'arw'],\r\n    'file-music': ['ac3', 'aif', 'amr', 'aud', 'mp3', 'flac', 'iff', 'm4a', 'm4b', 'm4p', 'mid', 'mpa', 'ogg', 'wav', 'wave'],\r\n    'file-video': ['mp4', 'avi', 'mpg', 'mov', 'wmv', '3gp', 'flv', 'm4v', 'mts', 'ts', 'webm'],\r\n    'file-zip': ['zip', 'rar', '7z', 'jar', 'gz'],\r\n  };\r\n\r\n  for (const icon in icons) {\r\n    if (icons[icon].includes(extention)) return icon;\r\n  }\r\n\r\n  return 'file-empty';\r\n};\r\n\r\nconst FileCard: React.FC<IFileCardProps> = ({ name, id, onClick, progress }) => {\r\n  const [extention] = name.match(/(?<=\\.)[a-zA-Z0-9]+$/) || [''];\r\n  const icon = getIcon(extention);\r\n\r\n  return (\r\n    <button className={css.card} onClick={() => onClick && onClick(id)}>\r\n      <div className={css.card__icon}>\r\n        <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href={`icons.svg#${icon}`} />\r\n        </svg>\r\n      </div>\r\n      <p className={css.card__title} title={name}>\r\n        {name}\r\n      </p>\r\n      <progress value={progress ?? 0} max={100} className={css.card__progress} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FileCard;\r\n","import FileList from './FileList';\r\n\r\nexport default FileList;\r\n","import React from 'react';\r\nimport css from './FileList.module.css';\r\nimport FileCard from 'Components/FileCard';\r\n\r\ninterface IFileListProps {\r\n  files: {\r\n    id: string;\r\n    name: string;\r\n    progress?: number;\r\n  }[];\r\n  onFileClick?: (id: string) => void;\r\n  appendComponent?: React.ReactNode;\r\n}\r\n\r\nconst FileList: React.FC<IFileListProps> = ({ files, onFileClick, appendComponent }) => {\r\n  return (\r\n    <ul className={css.list}>\r\n      {files.map(({ id, name, progress }) => (\r\n        <li key={id}>\r\n          <FileCard name={name} id={id} onClick={onFileClick} progress={progress} />\r\n        </li>\r\n      ))}\r\n      {appendComponent ? <li>{appendComponent}</li> : null}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default FileList;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React, { ReactNode } from 'react';\r\n\r\nimport css from './Header.module.css';\r\n\r\ninterface IHeaderProps {\r\n  main: ReactNode | string;\r\n  lead: ReactNode | string;\r\n}\r\n\r\nconst Header: React.FC<IHeaderProps> = ({ main, lead }) => (\r\n  <header className={css.header}>\r\n    <h2 className={css.header__heading}>{main}</h2>\r\n    <p className={css.header__lead}>{lead}</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import AddFileCard from './AddFileCard';\r\n\r\nexport default AddFileCard;\r\n","import React from 'react';\r\nimport css from './AddFileCard.module.css';\r\n\r\nconst AddFileCard: React.FC<{ onFileInput: (files: File[]) => void }> = ({ onFileInput }) => (\r\n  <label className={css.addFiles}>\r\n    <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n      <use href=\"icons.svg#file-add\" />\r\n    </svg>\r\n    <span className={css.addFiles__caption}>Add Files</span>\r\n    <input\r\n      type=\"file\"\r\n      className=\"visually-hidden\"\r\n      multiple\r\n      onChange={({ target: { files } }) => files && onFileInput(Array.from(files))}\r\n    />\r\n  </label>\r\n);\r\n\r\nexport default AddFileCard;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import React from 'react';\r\n\r\nimport css from './ShareHost.module.css';\r\nimport InputToClipboard from 'Components/InputToClipboard';\r\nimport FileList from 'Components/FileList';\r\nimport FileInput from 'Components/FileInput';\r\nimport Header from 'Components/Header';\r\nimport AddFileCard from 'Components/AddFileCard';\r\n\r\ninterface IShareHostProps {\r\n  files: { id: string; name: string }[];\r\n  addFiles: (files: File[]) => void;\r\n  removeFile: (id: string) => void;\r\n}\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ files, addFiles, removeFile }) => {\r\n  return (\r\n    <>\r\n      <Header main=\"Share This Link\" lead=\"waiting for connection...\" />\r\n      <div>\r\n        <div className={css.urlBox}>\r\n          <InputToClipboard text={window.location.href} />\r\n        </div>\r\n        <main className={css.container}>\r\n          <h2 className={css.heading}>Files</h2>\r\n          <FileList\r\n            files={files}\r\n            appendComponent={<AddFileCard onFileInput={addFiles} />}\r\n            onFileClick={removeFile}\r\n          />\r\n        </main>\r\n      </div>\r\n      <FileInput onFileInput={addFiles} noFocus />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareHost;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { hostAddFiles, hostRemoveFile } from 'lib/redux';\r\nimport { formatFileData } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareHost';\r\n\r\ninterface IShareHostProps {\r\n  connection: WebRTCWithFileChannel;\r\n  files: IHostFileStorage;\r\n  addFiles: typeof hostAddFiles;\r\n  removeFile: typeof hostRemoveFile;\r\n}\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ connection, files, addFiles, removeFile }) => {\r\n  useEffect(() => {\r\n    connection.onRequestFile = (id) => files[id];\r\n    connection.onConnection = () => {\r\n      connection.sendJSON({\r\n        action: 'addFiles',\r\n        files: formatFileData(files),\r\n      });\r\n    };\r\n  }, [connection, files]);\r\n\r\n  const handleAddFiles = useCallback(\r\n    (files: File[]) => {\r\n      const { payload } = addFiles(files);\r\n      connection.sendJSON({\r\n        action: 'addFiles',\r\n        files: formatFileData(payload),\r\n      });\r\n    },\r\n    [connection, addFiles],\r\n  );\r\n\r\n  const handleRemoveFile = useCallback(\r\n    (id: string) => {\r\n      removeFile(id);\r\n      connection.sendJSON({\r\n        action: 'removeFile',\r\n        id,\r\n      });\r\n    },\r\n    [connection, removeFile],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => ({ id, name: files[id].name }));\r\n\r\n  return <Share addFiles={handleAddFiles} files={filesList} removeFile={handleRemoveFile} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({ files: state.hostFiles });\r\n\r\nexport default connect(mapStateToProps, { addFiles: hostAddFiles, removeFile: hostRemoveFile })(\r\n  ShareHost,\r\n);\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React from 'react';\r\n\r\nimport css from './ShareClient.module.css';\r\nimport FileList from 'Components/FileList';\r\nimport Header from 'Components/Header';\r\n\r\ninterface IShareClientProps {\r\n  files: { id: string; name: string; progress?: number }[];\r\n  requestFile: (id: string) => void;\r\n}\r\n\r\nconst ShareClient: React.FC<IShareClientProps> = ({ files, requestFile }) => {\r\n  return (\r\n    <>\r\n      <Header main=\"Download Files\" lead=\"click on file to start download\" />\r\n      <div>\r\n        <main className={css.container}>\r\n          <h2 className={css.heading}>Files</h2>\r\n          <FileList files={files} onFileClick={requestFile} />\r\n        </main>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareClient;\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { clientAddFiles, clientRemoveFile, setDownloadProgress, saveFileData } from 'lib/redux';\r\nimport { tryParseJSON, saveFile } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareClient';\r\n\r\ninterface ISShareClientProps {\r\n  connection: WebRTCWithFileChannel;\r\n  files: IClientFileStorage;\r\n  addFiles: typeof clientAddFiles;\r\n  removeFile: typeof clientRemoveFile;\r\n  setDownloadProgress: typeof setDownloadProgress;\r\n  saveFileData: typeof saveFileData;\r\n}\r\n\r\nconst ShareClient: React.FC<ISShareClientProps> = ({\r\n  connection,\r\n  files,\r\n  addFiles,\r\n  removeFile,\r\n  setDownloadProgress,\r\n  saveFileData,\r\n}) => {\r\n  useEffect(() => {\r\n    connection.onMessage = (msg) => {\r\n      const obj = tryParseJSON(msg);\r\n      if (!obj) return;\r\n      switch (obj.action) {\r\n        case 'addFiles':\r\n          return addFiles(obj.files);\r\n        case 'removeFile':\r\n          return removeFile(obj.id);\r\n      }\r\n    };\r\n    connection.onFileProgress = ({ downloaded, id }) => {\r\n      setDownloadProgress(id, downloaded);\r\n    };\r\n  }, [connection, addFiles, removeFile, setDownloadProgress]);\r\n\r\n  useEffect(() => {\r\n    connection.onFile = (file, info) => {\r\n      saveFileData(info.id, file);\r\n      saveFile(file, info.name);\r\n    };\r\n  }, [connection, saveFileData]);\r\n\r\n  const handleRequestFile = useCallback(\r\n    (id: string) => {\r\n      const file = files[id];\r\n      if (file.file) return saveFile(file.file, file.name);\r\n      if (file.downloadedSize) return;\r\n\r\n      setDownloadProgress(id, 1);\r\n      connection.requestFile(id);\r\n    },\r\n    [connection, files, setDownloadProgress],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => {\r\n    const file = files[id];\r\n    const fileInfo: { id: string; name: string; progress?: number } = { id, name: file.name };\r\n    if (file.downloadedSize) fileInfo.progress = (file.downloadedSize / file.size) * 100;\r\n    return fileInfo;\r\n  });\r\n\r\n  return <Share files={filesList} requestFile={handleRequestFile} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({ files: state.clientFiles });\r\n\r\nexport default connect(mapStateToProps, {\r\n  addFiles: clientAddFiles,\r\n  removeFile: clientRemoveFile,\r\n  setDownloadProgress,\r\n  saveFileData,\r\n})(ShareClient);\r\n","import Share from './Share';\r\n\r\nexport default Share;\r\n","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ShareHost from 'Containers/ShareHost';\r\nimport ShareClient from 'Containers/ShareClient';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { clientSetConnection } from 'lib/redux';\r\n\r\ninterface IShareProps {\r\n  isHost: boolean;\r\n  connection: WebRTCWithFileChannel | undefined;\r\n  clientSetConnection: typeof clientSetConnection;\r\n}\r\n\r\nconst Share: React.FC<IShareProps> = ({ isHost, connection, clientSetConnection }) => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  if (connection) {\r\n    return isHost ? <ShareHost connection={connection} /> : <ShareClient connection={connection} />;\r\n  }\r\n\r\n  if (isHost || !id) {\r\n    history.replace('/');\r\n    return <></>;\r\n  }\r\n\r\n  const newConnection = new WebRTCWithFileChannel();\r\n  const firebaseConnection = new FirestoreConnection();\r\n\r\n  clientSetConnection(newConnection);\r\n\r\n  firebaseConnection\r\n    .getOffer(id)\r\n    .then((offer) => {\r\n      if (!offer) throw new Error(`Can't get offer`);\r\n      return newConnection.connect(offer);\r\n    })\r\n    .then((answer) => firebaseConnection.sendAnswer(id, answer))\r\n    .catch(() => {\r\n      history.replace('/');\r\n    });\r\n\r\n  return <div>Loading...</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    isHost: state.connection.isHost,\r\n    connection: state.connection.connection,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { clientSetConnection })(Share);\r\n","import React from 'react';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\n\r\nimport Home from 'Pages/Home';\r\nimport Share from 'Pages/Share';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route path=\"/:id\">\r\n            <Share />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'lib/redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["Components/FileCard/FileCard.module.css","Components/ShareClient/ShareClient.module.css","Pages/Home/Home.module.css","Components/ShareHost/ShareHost.module.css","Components/InputToClipboard/InputToClipboard.module.css","Components/Header/Header.module.css","Components/AddFileCard/AddFileCard.module.css","Components/Backdrop/Backdrop.module.css","Components/FileInput/FileInput.module.css","Components/Spinner/Spinner.module.css","Components/FileList/FileList.module.css","lib/helpers/classnames.tsx","lib/helpers/tryParseJSON.ts","lib/helpers/mapObject.ts","lib/helpers/formatFileData.ts","lib/helpers/saveFile.ts","lib/redux/action/actions.ts","lib/redux/action/types.ts","lib/helpers/generateFileId.ts","lib/redux/reducer/connection.ts","lib/redux/reducer/hostFiles.ts","lib/redux/reducer/clientFiles.ts","lib/redux/reducer/index.ts","lib/redux/store.ts","Components/Backdrop/index.ts","Components/Backdrop/Backdrop.tsx","Components/FileInput/index.tsx","Components/FileInput/FileInput.tsx","lib/webrtc/WebRTCConnection.ts","lib/webrtc/WebRTCFileChannel.ts","lib/webrtc/WebRTCWithFileChannel.ts","lib/firebase/firebase.ts","lib/firebase/FirestoreConnection.ts","Components/Spinner/Spinner.tsx","Pages/Home/index.tsx","Pages/Home/Home.tsx","Components/InputToClipboard/index.ts","Components/InputToClipboard/InputToClipboard.tsx","Components/FileCard/index.ts","Components/FileCard/FileCard.tsx","Components/FileList/index.ts","Components/FileList/FileList.tsx","Components/Header/index.ts","Components/Header/Header.tsx","Components/AddFileCard/index.ts","Components/AddFileCard/AddFileCard.tsx","Components/Spinner/index.ts","Components/ShareHost/ShareHost.tsx","Components/ShareHost/index.ts","Containers/ShareHost/index.ts","Containers/ShareHost/ShareHost.tsx","Components/ShareClient/index.ts","Components/ShareClient/ShareClient.tsx","Containers/ShareClient/index.ts","Containers/ShareClient/ShareClient.tsx","Pages/Share/index.tsx","Pages/Share/Share.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","classnames","classes","Array","isArray","join","Object","keys","filter","cn","tryParseJSON","str","JSON","parse","mapObject","obj","cb","newObj","id","files","name","size","file","link","document","createElement","href","URL","createObjectURL","body","appendChild","download","click","window","revokeObjectURL","remove","setConnectionStatus","status","type","payload","hostAddFiles","filesWithId","forEach","lastModified","generateFileId","initState","isHost","combined","combineReducers","connection","state","action","hostFiles","clientFiles","downloadedSize","store","createStore","rootReducer","Backdrop","children","active","css","backdrop","backdrop_active","className","FileInput","onFileInput","noFocus","useState","isInDragMode","setIsInDragMode","dropzoneRef","useRef","checkFiles","useCallback","filtered","match","length","handleDrop","evt","preventDefault","dataTransfer","from","handleInput","target","useEffect","handleDragStart","handleDragEnd","current","addEventListener","removeEventListener","ref","input","onDragOver","onDrop","multiple","onChange","tabIndex","RTCPeerConnectionConfig","iceServers","urls","WebRTCConnection","config","messageChannel","onConnection","onMessage","msg","createOffer","Promise","resolve","a","onicecandidate","candidate","description","setLocalDescription","iceGatheringState","connect","descr","remote","RTCSessionDescription","setRemoteDescription","createAnswer","sendMessage","message","readyState","send","setTimeout","sendJSON","stringify","RTCPeerConnection","this","createDataChannel","onmessage","data","channel","label","iceConnectionState","localDescription","WebRTCFileChannel","onFileReady","info","onFileProgress","fileMessage","json","fileInfo","Blob","undefined","push","byteLength","downloaded","sendingFileQueue","sendFile","queue","_sendFile","offset","isStarted","reader","FileReader","onload","result","onloadend","readAsArrayBuffer","slice","shift","WebRTCWithFileChannel","fileChannel","onFile","onRequestFile","_onMessage","asObj","requestFile","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FirestoreConnection","connections","doc","add","getOffer","get","response","offer","sendOffer","then","getAnswer","removeListener","onSnapshot","answer","sendAnswer","set","merge","firestore","collection","Spinner","spinner","Home","addConnection","addFiles","clearFiles","history","useHistory","loading","setLoading","handleFileInput","firestoreCon","container","heading","lead","spinnerContainer","InputToClipboard","text","urlInput","inputGroup","readOnly","value","onFocus","select","autoFocus","btn","onClick","navigator","clipboard","focus","writeText","icon","xmlns","FileCard","progress","iconOnHover","extention","toLowerCase","icons","includes","getIcon","card","card_iconContainer","card__icon","card__icon_hover","card__title","title","max","card__progress","FileList","onFileClick","appendComponent","list","map","key","Header","main","header","header__heading","header__lead","AddFileCard","addFiles__caption","SpinnerComp","ShareHost","removeFile","connectionStatus","mainText","leadText","connectionBox","location","formatFileData","handleAddFiles","handleRemoveFile","filesList","ShareClient","noFiles","setDownloadProgress","saveFileData","saveFile","handleRequestFile","Share","clientSetConnection","useParams","replace","newConnection","firebaseConnection","Error","catch","App","path","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","console"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,mBAAqB,qCAAqC,WAAa,6BAA6B,iBAAmB,mCAAmC,YAAc,8BAA8B,eAAiB,mC,mBCAvQD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,cAAgB,mCAAmC,UAAY,+BAA+B,QAAU,6BAA6B,iBAAmB,sCAAsC,QAAU,+B,mBCAjQD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,QAAU,sBAAsB,KAAO,mBAAmB,SAAW,uBAAuB,iBAAmB,iC,mBCArKD,EAAOC,QAAU,CAAC,QAAU,2BAA2B,cAAgB,iCAAiC,UAAY,6BAA6B,QAAU,2BAA2B,iBAAmB,sC,mBCAzMD,EAAOC,QAAU,CAAC,WAAa,qCAAqC,MAAQ,gCAAgC,IAAM,8BAA8B,KAAO,iC,mBCAvJD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,gBAAkB,gCAAgC,aAAe,+B,mBCAnHD,EAAOC,QAAU,CAAC,SAAW,8BAA8B,KAAO,4B,mBCAlED,EAAOC,QAAU,CAAC,SAAW,2BAA2B,gBAAkB,oC,mBCA1ED,EAAOC,QAAU,CAAC,MAAQ,2B,mBCA1BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,mBCA9DD,EAAOC,QAAU,CAAC,KAAO,yB,2JCWVC,EARI,SAACC,GAClB,OAAIC,MAAMC,QAAQF,GAAiBA,EAAQG,KAAK,KAEzCC,OAAOC,KAAKL,GAChBM,QAAO,SAACC,GAAD,OAAQP,EAAQO,MACvBJ,KAAK,MCDKK,EARM,SAACC,GACpB,IACE,OAAOC,KAAKC,MAAMF,GAClB,SACA,OAAO,OCQIG,EARG,SAACC,EAAaC,GAC9B,IAAMC,EAAc,GACpB,IAAK,IAAMC,KAAMH,EACfE,EAAOC,GAAMF,EAAGD,EAAIG,GAAKA,EAAIH,GAE/B,OAAOE,GCLM,WAACE,GACd,OAAOL,EAAUK,GAAO,kBAAqB,CAAEC,KAAvB,EAAGA,KAA0BC,KAA7B,EAASA,UCLpB,WAACC,EAAYF,GAC1B,IAAMG,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOC,IAAIC,gBAAgBN,GAChCE,SAASK,KAAKC,YAAYP,GAC1BA,EAAKQ,SAAWX,EAChBG,EAAKS,QACLC,OAAON,IAAIO,gBAAgBX,EAAKG,MAChCH,EAAKY,UCeMC,EAAsB,SAACC,GAAD,MAA6D,CAC9FC,KCfmC,wBDgBnCC,QAAS,CAAEF,YAGAG,EAAe,SAACrB,GAC3B,IAAMsB,EAAuC,GAG7C,OAFAtB,EAAMuB,SAAQ,SAACpB,GAAD,OAAWmB,EE7BZ,SAACnB,GAAD,gBAAmBA,EAAKqB,cAAxB,OAAuCrB,EAAKD,MAA5C,OAAmDC,EAAKF,MF6BhCwB,CAAetB,IAASA,KAEtD,CAAEgB,KC/BmB,iBD+BGC,QAASE,IGTpCI,EAA6B,CACjCC,QAAQ,EACRT,OAAQ,O,gBCJJQ,EAA8B,GCoB9BA,EAAgC,GC7BvBE,EANEC,YAAgB,CAAEC,WHwBpB,WAA0E,IAAzEC,EAAwE,uDAA/CL,EAAWM,EAAoC,uCACtF,OAAQA,EAAOb,MACb,IFxB0B,iBE0B1B,IFzBiC,wBE0B/B,OAAO,eAAKY,EAAZ,GAAsBC,EAAOZ,SAEjC,OAAOW,GG/BsCE,UFiBhC,WAA4E,IAA3EF,EAA0E,uDAAhDL,EAAWM,EAAqC,uCACxF,OAAQA,EAAOb,MACb,IHxB0B,iBGyBxB,OAAO,eAAKY,EAAZ,GAAsBC,EAAOZ,SAC/B,IHzB4B,mBGyB5B,MACWY,EAAOZ,QAAQrB,GAAiBC,GAAU+B,EADrD,eACqDA,EADrD,eAEE,OAAO/B,EACT,IH3B4B,mBG4B1B,MAAO,GAEX,OAAO+B,GE3BiDG,YDqC3C,WAAgF,IAA/EH,EAA8E,uDAAlDL,EAAWM,EAAuC,uCAC5F,OAAQA,EAAOb,MACb,IJxC4B,mBIyC1B,OAAO,eAAKY,EAAZ,GAAsBC,EAAOZ,SAC/B,IJzC8B,qBIyC9B,MACWY,EAAOZ,QAAQrB,GAAiBC,GAAU+B,EADrD,eACqDA,EADrD,eAEE,OAAO/B,EACT,IJvCiC,wBIwC/B,IAAMA,EAAK,eAAQ+B,GAEnB,OADA/B,EAAMgC,EAAOZ,QAAQrB,IAAIoC,eAAiBH,EAAOZ,QAAQe,eAClDnC,EAET,IJ3C0B,iBI4CxB,IAAMA,EAAK,eAAQ+B,GAEnB,OADA/B,EAAMgC,EAAOZ,QAAQrB,IAAII,KAAO6B,EAAOZ,QAAQjB,KACxCH,EAGX,OAAO+B,KEvDMK,EAFDC,YAAYC,G,mHCDXC,ECEkC,SAAC,GAAiC,IAAD,EAA9BC,EAA8B,EAA9BA,SAA8B,IAApBC,cAAoB,SAC1E1D,GAAO,mBACV2D,IAAIC,UAAW,GADL,cAEVD,IAAIE,gBAAkBH,GAFZ,GAKb,OAAO,yBAAKI,UAAW/D,EAAWC,IAAWyD,ICRhCM,ECU8B,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAAc,EACjCC,oBAAS,GADwB,mBAClEC,EADkE,KACpDC,EADoD,KAEnEC,EAAcC,iBAAuB,MAErCC,EAAaC,uBACjB,SAACvD,GACC,IAAMwD,EAAWxD,EAAMX,QAAO,SAACc,GAC7B,OAAkB,IAAdA,EAAKD,QACLC,EAAKF,KAAKwD,MAAM,UACF,KAAdtD,EAAKgB,MAA6B,OAAdhB,EAAKD,UAG3BsD,EAASE,QAAQX,EAAYS,KAEnC,CAACT,IAGGY,EAAaJ,uBACjB,SAACK,GACCA,EAAIC,iBACJV,GAAgB,GAEhB,IAAMnD,EAAQ4D,EAAIE,aAAa9D,MAC3BA,GAAOsD,EAAWtE,MAAM+E,KAAK/D,MAEnC,CAACsD,IAGGU,EAAcT,uBAClB,SAACK,GACC,IAAM5D,EAAQ4D,EAAIK,OAAOjE,MACrBA,GAAOsD,EAAWtE,MAAM+E,KAAK/D,MAEnC,CAACsD,IAkBH,OAfAY,qBAAU,WACR,IAAMC,EAAkB,kBAAMhB,GAAgB,IACxCiB,EAAgB,SAACR,GACjBA,EAAIK,SAAWb,EAAYiB,SAASlB,GAAgB,IAM1D,OAHArC,OAAOwD,iBAAiB,YAAaH,GACrCrD,OAAOwD,iBAAiB,YAAaF,GAE9B,WACLtD,OAAOyD,oBAAoB,YAAaJ,GACxCrD,OAAOyD,oBAAoB,YAAaH,MAEzC,IAGD,kBAAC,EAAD,CAAU3B,OAAQS,GAChB,yBAAKsB,IAAKpB,EAAaP,UAAWH,IAAI+B,MAAOC,WAAY,SAACd,GAAD,OAASA,EAAIC,kBAAkBc,OAAQhB,GAC9F,2BAAOxC,KAAK,OAAOlB,KAAK,QAAQ4C,UAAU,kBAAkB+B,UAAQ,EAACC,SAAUb,EAAac,SAAU9B,GAAW,EAAI,O,eClEvH+B,EAA4C,CAChDC,WAAY,CACV,CAAEC,KAAM,CAAC,iCACT,CAAEA,KAAM,CAAC,kCACT,CAAEA,KAAM,CAAC,kCACT,CAAEA,KAAM,CAAC,kCACT,CAAEA,KAAM,CAAC,kCACT,CAAEA,KAAM,CAAC,8BAsEEC,E,WA5Db,aAAiE,IAAD,OAApDC,EAAoD,uDAAzBJ,EAAyB,yBALhEjD,gBAKgE,OAJhEsD,oBAIgE,OAHhEC,aAAe,SAACnE,KAGgD,KAFhEoE,UAAY,SAACC,KAEmD,KAsBhEC,YAAc,WAAO,IACX1D,EAAe,EAAfA,WAER,OAAO,IAAI2D,QAAJ,uCAAoB,WAAOC,GAAP,SAAAC,EAAA,6DACzB7D,EAAW8D,eAAiB,qBAAGC,WAA8BH,EAAQ,EAAKI,cADjD,KAGnBhE,EAHmB,SAGkBA,EAAW0D,cAH7B,wCAGRO,oBAHQ,uBAKQ,aAAjCjE,EAAWkE,mBAAoCN,EAAQ,EAAKI,aALnC,2CAApB,wDAzBuD,KAkChEG,QAAU,SAACC,GAAmB,IACpBpE,EAAe,EAAfA,WACFqE,EAAS,IAAIC,sBAAsB3G,KAAKC,MAAMwG,IAEpD,OAAO,IAAIT,QAAJ,uCAAoB,WAAOC,GAAP,SAAAC,EAAA,sEACnB7D,EAAWuE,qBAAqBF,GADb,UAGL,UAAhBA,EAAOhF,KAHc,yCAGWuE,KAHX,cAKzB5D,EAAW8D,eAAiB,qBAAGC,WAA8BH,EAAQ,EAAKI,cALjD,KAMnBhE,EANmB,SAMkBA,EAAWwE,eAN7B,yCAMRP,oBANQ,4DAApB,wDAtCuD,KAgDhEQ,YAAc,SAAChB,GACb,IAAMiB,EAAU,EAAKpB,eAErB,GAA2B,SAAvBoB,EAAQC,WAAuB,OAAOD,EAAQE,KAAKnB,GACvDoB,YAAW,kBAAM,EAAKJ,YAAYhB,KAAM,KApDsB,KAuDhEqB,SAAW,SAAChH,GACV,EAAK2G,YAAY9G,KAAKoH,UAAUjH,KAvDhC,IAAMkC,EAAa,IAAIgF,kBAAkB3B,GACzC4B,KAAKjF,WAAaA,EAElB,IAAMsD,EAAiBtD,EAAWkF,kBAAkB,WAEpDD,KAAK3B,eAAiBA,EAEtBA,EAAe6B,UAAY,SAACrD,GAAD,OAAS,EAAK0B,UAAU1B,EAAIsD,OAEvDpF,EAAWwC,iBAAiB,eAAe,YAAkB,IAAf6C,EAAc,EAAdA,QACtB,YAAlBA,EAAQC,QAAqB,EAAKhC,eAAiB+B,MAEzDrF,EAAWwC,iBAAiB,4BAA4B,WACtD,EAAKe,aAAavD,EAAWuF,uB,wDAK/B,OAAO5H,KAAKoH,UAAUE,KAAKjF,WAAWwF,sB,qBCgG3BC,EA7Gb,WAAYzF,EAA+BsF,GAAgB,IAAD,gCAN1DD,aAM0D,OALlDhH,UAKkD,OAH1DqH,YAAc,SAACrH,EAAYsH,KAG+B,KAF1DC,eAAiB,SAACD,KAEwC,KASlDE,YAAc,SAACT,GACrB,GAAoB,kBAATA,EAAX,CAgBA,IAAMU,EAA0BnI,KAAKC,MAAMwH,GAE3C,GAAoB,QAAhBU,EAAK1G,QAAoB0G,EAAKH,KAChC,EAAKtH,KAAO,CACVJ,GAAI6H,EAAKH,KAAK1H,GACdE,KAAM2H,EAAKH,KAAKxH,KAChBC,KAAM0H,EAAKH,KAAKvH,KAChBiC,eAAgB,EAChB+E,KAAM,SAEH,GAAoB,SAAhBU,EAAK1G,QAAqB,EAAKf,KAAM,CAC9C,IAAM0H,EAAqB,CACzB9H,GAAI,EAAKI,KAAKJ,GACdE,KAAM,EAAKE,KAAKF,KAChBC,KAAM,EAAKC,KAAKD,MAEZC,EAAO,IAAI2H,KAAK,EAAK3H,KAAK+G,MAChC,EAAKM,YAAYrH,EAAM0H,GACvB,EAAK1H,UAAO4H,OAlCd,CACE,IAAM5H,EAAO,EAAKA,KAEdA,IACFA,EAAK+G,KAAKc,KAAKd,GACf/G,EAAKgC,gBAAkB+E,EAAKe,WAC5B,EAAKP,eAAe,CAClBxH,KAAMC,EAAKD,KACXgI,WAAY/H,EAAKgC,eACjBpC,GAAII,EAAKJ,QAnByC,KAgDlDoI,iBAGF,GAnDoD,KAoD1DC,SAAW,SAACjI,EAAYJ,GACtB,IAAMsI,EAAQ,EAAKF,iBACnBE,EAAML,KAAK,CAAE7H,OAAMJ,OAEfsI,EAAM3E,OAAS,GAEnB,EAAK4E,aA1DmD,KA6DlDA,UAAY,WAClB,IAAMD,EAAQ,EAAKF,iBACnB,GAAKE,EAAM3E,OAAX,CAFwB,MAIH2E,EAAM,GAAnBlI,EAJgB,EAIhBA,KAAMJ,EAJU,EAIVA,GAGVwI,EAAS,EACTC,GAAY,EAEVC,EAAS,IAAI3H,OAAO4H,WAC1BD,EAAOE,OAAS,WACd,GAAKF,EAAOG,QAAmC,kBAAlBH,EAAOG,OAApC,CAEA,IAAKJ,EAAW,CACd,IAAMf,EAA0B,CAC9BvG,OAAQ,MACRuG,KAAM,CACJ1H,KACAE,KAAME,EAAKF,KACXC,KAAMC,EAAKD,OAIf,EAAKiH,QAAQT,KAAKjH,KAAKoH,UAAUY,IACjCe,GAAY,EAGd,EAAKrB,QAAQT,KAAK+B,EAAOG,QAEzBL,GAzBgB,OA4BlBE,EAAOI,UAAY,WACjB,GAAIN,EAASpI,EAAKD,KAChBuI,EAAOK,kBAAkB3I,EAAK4I,MAAMR,EAAQA,EA9B9B,WA+BT,CAEL,EAAKpB,QAAQT,KAAKjH,KAAKoH,UADS,CAAE3F,OAAQ,UAE1C,EAAKiH,iBAAiBa,QACtB,EAAKV,cAITG,EAAOK,kBAAkB3I,EAAK4I,MAAMR,EAAQA,EAvC1B,SAjElBxB,KAAKI,QAAUrF,EAAWkF,kBAAkBI,GAC5CtF,EAAWwC,iBAAiB,eAAe,SAACV,GACtCA,EAAIuD,QAAQC,QAAUA,IAAO,EAAKD,QAAUvD,EAAIuD,YAGtDJ,KAAKI,QAAQF,UAAY,SAACrD,GAAD,OAAS,EAAK+D,YAAY/D,EAAIsD,QCc5C+B,E,kDA/Bb,WAAY9D,GAA4B,IAAD,uBACrC,cAAMA,IAPR+D,iBAMuC,IAJvCC,OAAS,SAAChJ,EAAYsH,KAIiB,EAHvCC,eAAiB,SAACD,KAGqB,EAFvC2B,cAAgB,SAACrJ,KAEsB,EAY/BsJ,WAAa,SAACzF,GACpB,IAAM0F,EAAQ/J,EAAaqE,EAAIsD,MAE/B,GAAIoC,GAA0B,aAAjBA,EAAMtH,OAAnB,CACE,IAAM7B,EAAO,EAAKiJ,cAAcE,EAAMvJ,IAClCI,GAAM,EAAKiI,SAASjI,EAAMmJ,EAAMvJ,SAItC,EAAKuF,UAAU1B,EAAIsD,OArBkB,EAwBvCkB,SAAW,SAACjI,EAAYJ,GAAb,OAA4B,EAAKmJ,YAAYd,SAASjI,EAAMJ,IAxBhC,EA0BvCwJ,YAAc,SAACxJ,GACb,EAAK6G,SAAS,CAAE5E,OAAQ,WAAYjC,QAxBpC,IAAMmJ,EAAc,IAAI3B,EAAkB,EAAKzF,WAAY,QAHtB,OAIrC,EAAKoH,YAAcA,EAEnBA,EAAY1B,YAAc,SAACrH,EAAMsH,GAAP,OAAgB,EAAK0B,OAAOhJ,EAAMsH,IAC5DyB,EAAYxB,eAAiB,SAACD,GAAD,OAAU,EAAKC,eAAeD,IAE3D,EAAKrC,eAAe6B,UAAY,EAAKoC,WATA,E,UAPLnE,G,cCOpCsE,gBATe,CACbC,OAAQC,0CACRC,WAAYD,mCACZE,YAAaF,0CACbG,UAAWH,mBACXI,cAAeJ,+BACfK,kBAAmBL,kBAKNF,QCsBAQ,EA7Bb,aAAe,IAAD,gCAFNC,iBAEM,OAINC,IAAM,SAACnK,GAAD,OAAgB,EAAKkK,YAAYC,IAAInK,IAJrC,KAKNoK,IAAM,SAACjD,GAAD,OAA2C,EAAK+C,YAAYE,IAAIjD,IALhE,KAOdkD,SAPc,uCAOH,WAAOrK,GAAP,iBAAA4F,EAAA,sEACc,EAAKuE,IAAInK,GAAIsK,MAD3B,UACHC,EADG,SAEHpD,EAAOoD,EAASpD,QAFb,yCAGQA,EAAKqD,OAHb,2CAPG,2DAadC,UAAY,SAACD,GAAD,OAAmB,EAAKJ,IAAI,CAAEI,UAASE,MAAK,qBAAG1K,OAb7C,KAed2K,UAAY,SAAC3K,GAAD,OACV,IAAI0F,SAAgB,SAACC,GACnB,IAAMiF,EAAiB,EAAKT,IAAInK,GAAI6K,YAAW,SAACN,GAC9C,IAAMpD,EAAOoD,EAASpD,OACjBA,GAASA,EAAK2D,SAEnBnF,EAAQwB,EAAK2D,QACbF,YAtBQ,KA0BdG,WAAa,SAAC/K,EAAY8K,GAAb,OAAgC,EAAKX,IAAInK,GAAIgL,IAAI,CAAEF,UAAU,CAAEG,OAAO,KAzBjFjE,KAAKkD,YAAcT,EAASyB,YAAYC,WAAW,gB,iBCHxCC,EAFW,kBAAM,0BAAMtI,UAAWH,IAAI0I,WCDtCC,ECwDApF,YAAQ,KAAM,CAC3BqF,cnB7C+B,SAACxJ,GAAD,MAA2D,CAC1FX,KCR4B,iBDS5BC,QAAS,CAAEO,QAAQ,EAAMG,gBmB4CzByJ,SAAUlK,EACVmK,WnBd4B,WAC5B,MAAO,CAAErK,KC9CqB,sBkBwDjB8E,EAxCoB,SAAC,GAA6C,IAA3CqF,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACvDC,EAAUC,cAD8D,EAEhDzI,oBAAS,GAFuC,mBAEvE0I,EAFuE,KAE9DC,EAF8D,KAIxEC,EAAe,uCAAG,WAAO7L,GAAP,uBAAA2F,EAAA,6DAChB7D,EAAa,IAAImH,EACvBqC,EAAcxJ,GACd0J,IACAD,EAASvL,GAEH8L,EAAe,IAAI9B,EAEzB4B,GAAW,GARW,SAUF9J,EAAW0D,cAVT,cAUhB+E,EAVgB,iBAWLuB,EAAatB,UAAUD,GAXlB,eAWhBxK,EAXgB,OAatB0L,EAAQzD,KAAR,WAAiBjI,IAbK,UAcD+L,EAAapB,UAAU3K,GAdtB,QAchB8K,EAdgB,OAetB/I,EAAWmE,QAAQ4E,GAfG,4CAAH,sDAkBrB,OACE,oCACE,2BAAOhI,UAAWH,IAAIqJ,WACpB,wBAAIlJ,UAAWH,IAAIsJ,SAAnB,sBACA,uBAAGnJ,UAAWH,IAAIuJ,MAAlB,sCACA,kBAAC,EAAD,CAAWlJ,YAAa8I,KAE1B,kBAAC,EAAD,CAAUpJ,OAAQkJ,GAChB,yBAAK9I,UAAWH,IAAIC,UAClB,yBAAKE,UAAWH,IAAIwJ,kBAClB,kBAAC,EAAD,a,wCChDGC,GCK4C,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtDC,EAAWhJ,iBAAyB,MAY1C,OACE,yBAAKR,UAAWH,KAAI4J,YAClB,2BAAO9H,IAAK6H,EAAUxJ,UAAWH,KAAI+B,MAAO8H,UAAQ,EAACC,MAAOJ,EAAMK,QAJ7C,SAAC7I,GAAD,OAA6CA,EAAIK,OAAOyI,UAIgBC,WAAS,IACtG,4BAAQ9J,UAAWH,KAAIkK,IAAKC,QAbZ,WACS,IAAD,EAA1B,IAAKC,UAAUC,UACb,iBAAOV,EAAShI,eAAhB,aAAO,EAAkB2I,QAG3BF,UAAUC,UAAUE,UAAUb,KAS1B,yBAAKvJ,UAAWH,KAAIwK,KAAMC,MAAM,8BAC9B,yBAAK5M,KAAK,uB,wCCvBL6M,GC0B4B,SAAC,GAAkD,IAAhDnN,EAA+C,EAA/CA,KAAMF,EAAyC,EAAzCA,GAAI8M,EAAqC,EAArCA,QAASQ,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAAkB,EACvErN,EAAKwD,MAAM,yBAA2B,CAAC,IACrDyJ,EAnBQ,SAACK,GACfA,EAAYA,EAAUC,cACtB,IAAMC,EAAqC,CACzC,YAAa,CAAC,MAAO,MAAO,OAAQ,MAAO,OAC3C,aAAc,CAAC,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,KAAM,OAAQ,MAAO,MAAO,OAClI,aAAc,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAClH,aAAc,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,QACpF,WAAY,CAAC,MAAO,MAAO,KAAM,MAAO,OAG1C,IAAK,IAAMP,KAAQO,EACjB,GAAIA,EAAMP,GAAMQ,SAASH,GAAY,OAAOL,EAG9C,MAAO,aAKMS,CAF8E,qBAI3F,OACE,4BAAQ9K,UAAWH,KAAIkL,KAAMf,QAAS,kBAAMA,GAAWA,EAAQ9M,KAC7D,yBAAK8C,UAAWH,KAAImL,oBAClB,yBAAKhL,UAAWH,KAAIoL,WAAYX,MAAM,8BACpC,yBAAK5M,KAAI,oBAAe2M,MAE1B,yBAAKrK,UAAWH,KAAIqL,iBAAkBZ,MAAM,8BAC1C,yBAAK5M,KAAI,oBAAe+M,OAG5B,uBAAGzK,UAAWH,KAAIsL,YAAaC,MAAOhO,GACnCA,GAEH,8BAAUuM,MAAK,OAAEa,QAAF,IAAEA,IAAY,EAAGa,IAAK,IAAKrL,UAAWH,KAAIyL,mBC3ChDC,GCa4B,SAAC,GAA0D,IAAxDpO,EAAuD,EAAvDA,MAAOqO,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,gBAAiBhB,EAAkB,EAAlBA,YACjF,OACE,wBAAIzK,UAAWH,KAAI6L,MAChBvO,EAAMwO,KAAI,gBAAGzO,EAAH,EAAGA,GAAIE,EAAP,EAAOA,KAAMoN,EAAb,EAAaA,SAAb,OACT,wBAAIoB,IAAK1O,GACP,kBAAC,GAAD,CAAUE,KAAMA,EAAMF,GAAIA,EAAI8M,QAASwB,EAAahB,SAAUA,EAAUC,YAAaA,QAGxFgB,EAAkB,4BAAKA,GAAwB,O,oBCrBvCI,GCOwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAM1C,EAAT,EAASA,KAAT,OACrC,4BAAQpJ,UAAWH,KAAIkM,QACrB,wBAAI/L,UAAWH,KAAImM,iBAAkBF,GACrC,uBAAG9L,UAAWH,KAAIoM,cAAe7C,K,oBCVtB8C,GCCyD,SAAC,GAAqB,IAAnBhM,EAAkB,EAAlBA,YACnE8I,EAAkBtI,uBACtB,SAACK,GACC,IAAM5D,EAAQhB,MAAM+E,KAAKH,EAAIK,OAAOjE,OAAS,IAAIX,QAAO,SAACc,GACvD,OAAkB,IAAdA,EAAKD,QACLC,EAAKF,KAAKwD,MAAM,UACF,KAAdtD,EAAKgB,MAA6B,OAAdhB,EAAKD,UAG3BF,EAAM0D,QAAQX,EAAY/C,KAEhC,CAAC+C,IAGH,OACE,2BAAOF,UAAWH,KAAI6I,UACpB,yBAAK1I,UAAWH,KAAIwK,KAAMC,MAAM,8BAC9B,yBAAK5M,KAAK,wBAEZ,0BAAMsC,UAAWH,KAAIsM,mBAArB,aACA,2BAAO7N,KAAK,OAAO0B,UAAU,kBAAkB+B,UAAQ,EAACC,SAAUgH,MCrBzDV,KCeT8D,GACJ,6DAEE,0BAAMpM,UAAWH,KAAI0I,SACnB,kBAAC,GAAD,QCnBS8D,GDwB8B,SAAC,GAAuD,IAArDlP,EAAoD,EAApDA,MAAOuL,EAA6C,EAA7CA,SAAU4D,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,iBACrEC,EAAgC,cAArBD,EAAmC,8BAAgC,kBAC9EE,EAAgC,cAArBF,EAAmC,iDAAmDH,GAEvG,OACE,oCACE,kBAAC,GAAD,CAAQN,KAAMU,EAAUpD,KAAMqD,IAC9B,yBAAKzM,UAAWH,KAAI6M,eACI,cAArBH,EAAmC,kBAAC,GAAD,CAAkBhD,KAAMtL,OAAO0O,SAASjP,OAAW,yBAAKsC,UAAWH,KAAI0M,kBAApB,cAEzF,0BAAMvM,UAAWH,KAAIqJ,WACnB,wBAAIlJ,UAAWH,KAAIsJ,SAAnB,SACA,kBAAC,GAAD,CAAUhM,MAAOA,EAAOsO,gBAAiB,kBAAC,GAAD,CAAavL,YAAawI,IAAc8C,YAAac,EAAY7B,YAAY,iBAExH,kBAAC,EAAD,CAAWvK,YAAawI,EAAUvI,SAAO,MEtChCkM,GCyDAjJ,aALS,SAAClE,GAAD,MAAwB,CAC9C/B,MAAO+B,EAAME,UACbmN,iBAAkBrN,EAAMD,WAAWZ,UAGG,CAAEqK,SAAUlK,EAAc8N,WlCrBpC,SAACpP,GAAD,MAAwC,CACpEoB,KCtC8B,mBDuC9BC,QAAS,CAAErB,QkCmBiFkB,uBAA/EgF,EA1C8B,SAAC,GAAwF,IAAtFnE,EAAqF,EAArFA,WAAY9B,EAAyE,EAAzEA,MAAOuL,EAAkE,EAAlEA,SAAU4D,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,iBAAkBnO,EAA0B,EAA1BA,oBACzGiD,qBAAU,WACRpC,EAAWsH,cAAgB,SAACrJ,GAAD,OAAQC,EAAMD,IACzC+B,EAAWuD,aAAe,SAACnE,GACzBD,EAAoBC,GACL,cAAXA,GACJY,EAAW8E,SAAS,CAAE5E,OAAQ,WAAYhC,MAAOyP,EAAezP,QAEjE,CAAC8B,EAAY9B,EAAOiB,IAEvB,IAAMyO,EAAiBnM,uBACrB,SAACvD,GAAmB,IACVoB,EAAYmK,EAASvL,GAArBoB,QACRU,EAAW8E,SAAS,CAClB5E,OAAQ,WACRhC,MAAOyP,EAAerO,OAG1B,CAACU,EAAYyJ,IAGToE,EAAmBpM,uBACvB,SAACxD,GACCoP,EAAWpP,GACX+B,EAAW8E,SAAS,CAClB5E,OAAQ,aACRjC,SAGJ,CAAC+B,EAAYqN,IAGTS,EAAYzQ,OAAOC,KAAKY,GAAOwO,KAAI,SAACzO,GAAD,MAAS,CAAEA,KAAIE,KAAMD,EAAMD,GAAIE,SAExE,OAAO,kBAAC,GAAD,CAAOsL,SAAUmE,EAAgB1P,MAAO4P,EAAWT,WAAYQ,EAAkBP,iBAAkBA,O,oBCjD7FS,GCWkC,SAAC,GAA8C,IAA5C7P,EAA2C,EAA3CA,MAAOuJ,EAAoC,EAApCA,YAAa6F,EAAuB,EAAvBA,iBAChEE,EAAgC,cAArBF,EAAmC,kCAAoC,aAExF,OACE,oCACE,kBAAC,GAAD,CAAQT,KAAK,iBAAiB1C,KAAMqD,IACpC,yBAAKzM,UAAWH,KAAI6M,eACI,cAArBH,EACC,yBAAKvM,UAAWH,KAAI0I,SAClB,kBAAC,GAAD,OAGF,yBAAKvI,UAAWH,KAAI0M,kBAApB,sBAGJ,0BAAMvM,UAAWH,KAAIqJ,WACnB,wBAAIlJ,UAAWH,KAAIsJ,SAAnB,SACC7M,OAAOC,KAAKY,GAAO0D,OAAS,kBAAC,GAAD,CAAU1D,MAAOA,EAAOqO,YAAa9E,EAAa+D,YAAY,kBAAqB,wBAAIzK,UAAWH,KAAIoN,SAAnB,8BC5BzGD,GCkEA5J,aAFS,SAAClE,GAAD,MAAwB,CAAE/B,MAAO+B,EAAMG,YAAakN,iBAAkBrN,EAAMD,WAAWZ,UAEvE,CACtCqK,StCpC4B,SAACvL,GAAD,MAAuD,CACnFmB,KC9B8B,mBD+B9BC,QAASpB,IsCmCTmP,WtC5B8B,SAACpP,GAAD,MAA0C,CACxEoB,KCtCgC,qBDuChCC,QAAS,CAAErB,QsC2BXgQ,oBtCpBiC,SAAChQ,EAAYG,GAAb,MAA8D,CAC/FiB,KC1CmC,wBD2CnCC,QAAS,CAAErB,KAAIoC,eAAgBjC,KsCmB/B8P,atCjB0B,SAACjQ,EAAYI,GAAb,MAAwD,CAClFgB,KC7C4B,iBD8C5BC,QAAS,CAAErB,KAAII,UsCgBfc,uBALagF,EAjDmC,SAAC,GAA2H,IAAzHnE,EAAwH,EAAxHA,WAAYsN,EAA4G,EAA5GA,iBAAkBpP,EAA0F,EAA1FA,MAAOuL,EAAmF,EAAnFA,SAAU4D,EAAyE,EAAzEA,WAAYY,EAA6D,EAA7DA,oBAAqBC,EAAwC,EAAxCA,aAAc/O,EAA0B,EAA1BA,oBACjJiD,qBAAU,WACRpC,EAAWwD,UAAY,SAACC,GACtB,IAAM3F,EAAML,EAAagG,GACzB,GAAK3F,EACL,OAAQA,EAAIoC,QACV,IAAK,WACH,OAAOuJ,EAAS3L,EAAII,OACtB,IAAK,aACH,OAAOmP,EAAWvP,EAAIG,MAG5B+B,EAAW4F,eAAiB,YAAyB,IAAtBQ,EAAqB,EAArBA,WAAYnI,EAAS,EAATA,GACzCgQ,EAAoBhQ,EAAImI,IAE1BpG,EAAWuD,aAAepE,IACzB,CAACa,EAAYyJ,EAAU4D,EAAYY,EAAqB9O,IAE3DiD,qBAAU,WACRpC,EAAWqH,OAAS,SAAChJ,EAAMsH,GACzBuI,EAAavI,EAAK1H,GAAII,GACtB8P,EAAS9P,EAAMsH,EAAKxH,SAErB,CAAC6B,EAAYkO,IAEhB,IAAME,EAAoB3M,uBACxB,SAACxD,GACC,IAAMI,EAAOH,EAAMD,GACnB,GAAII,EAAKA,KAAM,OAAO8P,EAAS9P,EAAKA,KAAMA,EAAKF,MAC3CE,EAAKgC,iBAET4N,EAAoBhQ,EAAI,GACxB+B,EAAWyH,YAAYxJ,MAEzB,CAAC+B,EAAY9B,EAAO+P,IAGhBH,EAAYzQ,OAAOC,KAAKY,GAAOwO,KAAI,SAACzO,GACxC,IAAMI,EAAOH,EAAMD,GACb8H,EAA4D,CAAE9H,KAAIE,KAAME,EAAKF,MAEnF,OADIE,EAAKgC,iBAAgB0F,EAASwF,SAAYlN,EAAKgC,eAAiBhC,EAAKD,KAAQ,KAC1E2H,KAGT,OAAO,kBAAC,GAAD,CAAO7H,MAAO4P,EAAWrG,YAAa2G,EAAmBd,iBAAkBA,OC7DrEe,GCqDAlK,aAPS,SAAClE,GACvB,MAAO,CACLJ,OAAQI,EAAMD,WAAWH,OACzBG,WAAYC,EAAMD,WAAWA,cAIO,CAAEsO,oBxCrCP,SAACtO,GAAD,MAA2D,CAC5FX,KCZ4B,iBDa5BC,QAAS,CAAEO,QAAQ,EAAOG,iBwCmCbmE,EAvCsB,SAAC,GAAiD,IAA/CtE,EAA8C,EAA9CA,OAAQG,EAAsC,EAAtCA,WAAYsO,EAA0B,EAA1BA,oBACpD3E,EAAUC,cACR3L,EAAOsQ,cAAPtQ,GAER,GAAI+B,EACF,OAAOH,EAAS,kBAAC,GAAD,CAAWG,WAAYA,IAAiB,kBAAC,GAAD,CAAaA,WAAYA,IAGnF,GAAIH,IAAW5B,EAEb,OADA0L,EAAQ6E,QAAQ,KACT,qCAGT,IAAMC,EAAgB,IAAItH,EACpBuH,EAAqB,IAAIxG,EAe/B,OAbAoG,EAAoBG,GAEpBC,EACGpG,SAASrK,GACT0K,MAAK,SAACF,GACL,IAAKA,EAAO,MAAM,IAAIkG,MAAJ,mBAClB,OAAOF,EAActK,QAAQsE,MAE9BE,MAAK,SAACI,GAAD,OAAY2F,EAAmB1F,WAAW/K,EAAI8K,MACnD6F,OAAM,WACLjF,EAAQ6E,QAAQ,QAGb,8CCtBMK,OAjBf,WACE,OACE,yBAAK9N,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+N,KAAK,QACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCHQC,QACW,cAA7B/P,OAAO0O,SAASsB,UAEe,UAA7BhQ,OAAO0O,SAASsB,UAEhBhQ,OAAO0O,SAASsB,SAASrN,MACvB,2DCTNsN,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAU7O,MAAOA,GACf,kBAAC,GAAD,QAGJ/B,SAAS6Q,eAAe,SD4HpB,kBAAmBpE,WACrBA,UAAUqE,cAAcC,MACrB3G,MAAK,SAAA4G,GACJA,EAAaC,gBAEdZ,OAAM,SAAAa,GACLC,QAAQD,MAAMA,EAAM/K,c","file":"static/js/main.02cfca32.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"FileCard_card__2LQTx\",\"card_iconContainer\":\"FileCard_card_iconContainer__1stON\",\"card__icon\":\"FileCard_card__icon__3au0f\",\"card__icon_hover\":\"FileCard_card__icon_hover__1ZfZb\",\"card__title\":\"FileCard_card__title__3F9SZ\",\"card__progress\":\"FileCard_card__progress__13gjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareClient_heading__VAHtz\",\"connectionBox\":\"ShareClient_connectionBox__1kudq\",\"container\":\"ShareClient_container__22l9m\",\"spinner\":\"ShareClient_spinner__1DKly\",\"connectionStatus\":\"ShareClient_connectionStatus__zdiMK\",\"noFiles\":\"ShareClient_noFiles__1diTg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__q5gBo\",\"heading\":\"Home_heading__3rzF0\",\"lead\":\"Home_lead__27OI1\",\"backdrop\":\"Home_backdrop__1n7Oa\",\"spinnerContainer\":\"Home_spinnerContainer__3Cqik\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareHost_heading__3e1Cg\",\"connectionBox\":\"ShareHost_connectionBox__2Ibxu\",\"container\":\"ShareHost_container__3R05H\",\"spinner\":\"ShareHost_spinner__3zaTs\",\"connectionStatus\":\"ShareHost_connectionStatus__32Sgu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"InputToClipboard_inputGroup__1K_jF\",\"input\":\"InputToClipboard_input__aZxeq\",\"btn\":\"InputToClipboard_btn__13k-2\",\"icon\":\"InputToClipboard_icon__xv5Og\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Q76hA\",\"header__heading\":\"Header_header__heading__BlGzf\",\"header__lead\":\"Header_header__lead__1jR8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addFiles\":\"AddFileCard_addFiles__1Cp53\",\"icon\":\"AddFileCard_icon__2tDcj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Backdrop_backdrop__2USgN\",\"backdrop_active\":\"Backdrop_backdrop_active__Esi8Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FileInput_input__3v6pL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__3GSHq\",\"rotate\":\"Spinner_rotate__2wN5u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FileList_list__3k0mc\"};","interface ClassObject {\r\n  [index: string]: boolean;\r\n}\r\n\r\nconst classnames = (classes: ClassObject | string[]) => {\r\n  if (Array.isArray(classes)) return classes.join(' ');\r\n\r\n  return Object.keys(classes)\r\n    .filter((cn) => classes[cn])\r\n    .join(' ');\r\n};\r\n\r\nexport default classnames;\r\n","const tryParseJSON = (str: string): any | null => {\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default tryParseJSON;\r\n","type Object = { [key: string]: any };\r\n\r\ntype Callback = (value?: any, key?: string, object?: Object) => any;\r\n\r\nconst mapObject = (obj: Object, cb: Callback) => {\r\n  const newObj: any = {};\r\n  for (const id in obj) {\r\n    newObj[id] = cb(obj[id], id, obj);\r\n  }\r\n  return newObj;\r\n};\r\n\r\nexport default mapObject;\r\n","import mapObject from './mapObject';\r\n\r\ntype FileInfo = { name: string; size: number };\r\n\r\nexport default (files: IHostFileStorage): FileInfo => {\r\n  return mapObject(files, ({ name, size }) => ({ name, size }));\r\n};\r\n","export default (file: Blob, name: string) => {\r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(file);\r\n  document.body.appendChild(link);\r\n  link.download = name;\r\n  link.click();\r\n  window.URL.revokeObjectURL(link.href);\r\n  link.remove();\r\n};\r\n","import { generateFileId } from 'lib/helpers';\r\n\r\nimport {\r\n  SET_CONNECTION,\r\n  SET_CONNECTION_STATUS,\r\n  HOST_ADD_FILES,\r\n  HOST_REMOVE_FILE,\r\n  HOST_CLEAR_FILES,\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from './types';\r\n\r\nexport const hostSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: true, connection },\r\n});\r\nexport const clientSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: false, connection },\r\n});\r\nexport const setConnectionStatus = (status: RTCIceConnectionState): IConnectionStatusAction => ({\r\n  type: SET_CONNECTION_STATUS,\r\n  payload: { status },\r\n});\r\n\r\nexport const hostAddFiles = (files: File[]): IHostAddFilesAction => {\r\n  const filesWithId: { [key: string]: File } = {};\r\n  files.forEach((file) => (filesWithId[generateFileId(file)] = file));\r\n\r\n  return { type: HOST_ADD_FILES, payload: filesWithId };\r\n};\r\nexport const clientAddFiles = (files: IClientFileStorage): IClientAddFilesAction => ({\r\n  type: CLIENT_ADD_FILES,\r\n  payload: files,\r\n});\r\n\r\nexport const hostRemoveFile = (id: string): IHostRemoveFileAction => ({\r\n  type: HOST_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\nexport const clientRemoveFile = (id: string): IClientRemoveFileAction => ({\r\n  type: CLIENT_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\n\r\nexport const hostClearFiles = (): IHostClearFilesAction => {\r\n  return { type: HOST_CLEAR_FILES };\r\n};\r\n\r\nexport const setDownloadProgress = (id: string, size: number): IClientDownloadProgressAction => ({\r\n  type: SET_DOWNLOAD_PROGRESS,\r\n  payload: { id, downloadedSize: size },\r\n});\r\nexport const saveFileData = (id: string, file: Blob): IClientSaveFileDataAction => ({\r\n  type: SAVE_FILE_DATA,\r\n  payload: { id, file },\r\n});\r\n","export const HOST_ADD_FILES = 'HOST_ADD_FILES';\r\nexport const HOST_REMOVE_FILE = 'HOST_REMOVE_FILE';\r\nexport const HOST_CLEAR_FILES = 'HOST_CLEAR_FILES';\r\n\r\nexport const CLIENT_ADD_FILES = 'CLIENT_ADD_FILES';\r\nexport const CLIENT_REMOVE_FILE = 'CLIENT_REMOVE_FILE';\r\n\r\nexport const SET_CONNECTION = 'SET_CONNECTION';\r\nexport const SET_CONNECTION_STATUS = 'SET_CONNECTION_STATUS';\r\n\r\nexport const SET_DOWNLOAD_PROGRESS = 'SET_DOWNLOAD_PROGRESS';\r\nexport const SAVE_FILE_DATA = 'SAVE_FILE_DATA';\r\n","export default (file: File) => `${file.lastModified}${file.size}${file.name}`;\r\n","import { SET_CONNECTION, SET_CONNECTION_STATUS } from '../action';\r\n\r\ninterface IConnectionInfo {\r\n  isHost: boolean;\r\n  connection?: WebRTCWithFileChannel;\r\n  status: RTCIceConnectionState;\r\n}\r\n\r\ndeclare global {\r\n  interface IConnectionAction {\r\n    type: typeof SET_CONNECTION;\r\n    payload: {\r\n      isHost: boolean;\r\n      connection: WebRTCWithFileChannel;\r\n    };\r\n  }\r\n  interface IConnectionStatusAction {\r\n    type: typeof SET_CONNECTION_STATUS;\r\n    payload: { status: RTCIceConnectionState };\r\n  }\r\n}\r\n\r\nconst initState: IConnectionInfo = {\r\n  isHost: false,\r\n  status: 'new',\r\n};\r\n\r\ntype Action = IConnectionAction | IConnectionStatusAction;\r\n\r\nexport default (state: IConnectionInfo = initState, action: Action): IConnectionInfo => {\r\n  switch (action.type) {\r\n    case SET_CONNECTION:\r\n      return { ...state, ...action.payload };\r\n    case SET_CONNECTION_STATUS:\r\n      return { ...state, ...action.payload };\r\n  }\r\n  return state;\r\n};\r\n","import { HOST_ADD_FILES, HOST_REMOVE_FILE, HOST_CLEAR_FILES } from '../action';\r\n\r\ndeclare global {\r\n  interface IHostFileStorage {\r\n    [key: string]: File;\r\n  }\r\n  interface IHostAddFilesAction {\r\n    type: typeof HOST_ADD_FILES;\r\n    payload: IHostFileStorage;\r\n  }\r\n  interface IHostRemoveFileAction {\r\n    type: typeof HOST_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n  interface IHostClearFilesAction {\r\n    type: typeof HOST_CLEAR_FILES;\r\n  }\r\n}\r\ntype Action = IHostAddFilesAction | IHostRemoveFileAction | IHostClearFilesAction;\r\n\r\nconst initState: IHostFileStorage = {};\r\n\r\nexport default (state: IHostFileStorage = initState, action: Action): IHostFileStorage => {\r\n  switch (action.type) {\r\n    case HOST_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case HOST_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n    case HOST_CLEAR_FILES:\r\n      return {};\r\n  }\r\n  return state;\r\n};\r\n","import {\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from '../action';\r\n\r\ndeclare global {\r\n  interface IClientFileStorage {\r\n    [key: string]: {\r\n      name: string;\r\n      size: number;\r\n      downloadedSize?: number;\r\n      file?: Blob;\r\n    };\r\n  }\r\n  interface IClientAddFilesAction {\r\n    type: typeof CLIENT_ADD_FILES;\r\n    payload: IClientFileStorage;\r\n  }\r\n  interface IClientRemoveFileAction {\r\n    type: typeof CLIENT_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n  interface IClientDownloadProgressAction {\r\n    type: typeof SET_DOWNLOAD_PROGRESS;\r\n    payload: { id: string; downloadedSize: number };\r\n  }\r\n  interface IClientSaveFileDataAction {\r\n    type: typeof SAVE_FILE_DATA;\r\n    payload: { id: string; file: Blob };\r\n  }\r\n}\r\n\r\ntype Action =\r\n  | IClientAddFilesAction\r\n  | IClientRemoveFileAction\r\n  | IClientDownloadProgressAction\r\n  | IClientSaveFileDataAction;\r\n\r\nconst initState: IClientFileStorage = {};\r\n\r\nexport default (state: IClientFileStorage = initState, action: Action): IClientFileStorage => {\r\n  switch (action.type) {\r\n    case CLIENT_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case CLIENT_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n    case SET_DOWNLOAD_PROGRESS: {\r\n      const files = { ...state };\r\n      files[action.payload.id].downloadedSize = action.payload.downloadedSize;\r\n      return files;\r\n    }\r\n    case SAVE_FILE_DATA: {\r\n      const files = { ...state };\r\n      files[action.payload.id].file = action.payload.file;\r\n      return files;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport connection from './connection';\r\nimport hostFiles from './hostFiles';\r\nimport clientFiles from './clientFiles';\r\n\r\nconst combined = combineReducers({ connection, hostFiles, clientFiles });\r\n\r\ndeclare global {\r\n  type ReduxStore = ReturnType<typeof combined>;\r\n}\r\n\r\nexport default combined;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import Backdrop from './Backdrop';\r\n\r\nexport default Backdrop;\r\n","import React from 'react';\r\nimport css from './Backdrop.module.css';\r\nimport { classnames } from 'lib/helpers';\r\n\r\nconst Backdrop: React.FC<{ active?: boolean }> = ({ children, active = true }) => {\r\n  const classes = {\r\n    [css.backdrop]: true,\r\n    [css.backdrop_active]: active,\r\n  };\r\n\r\n  return <div className={classnames(classes)}>{children}</div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import FileInput from './FileInput';\r\n\r\nexport default FileInput;\r\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport css from './FileInput.module.css';\r\n\r\nimport Backdrop from 'Components/Backdrop';\r\n\r\ninterface IFileInputProps {\r\n  onFileInput: (files: File[]) => void;\r\n  noFocus?: boolean;\r\n}\r\n\r\ntype InputFileChangeEvent = React.ChangeEvent<HTMLInputElement>;\r\n\r\nconst FileInput: React.FC<IFileInputProps> = ({ onFileInput, noFocus }) => {\r\n  const [isInDragMode, setIsInDragMode] = useState(false);\r\n  const dropzoneRef = useRef<HTMLDivElement>(null);\r\n\r\n  const checkFiles = useCallback(\r\n    (files: File[]) => {\r\n      const filtered = files.filter((file) => {\r\n        if (file.size === 0) return false;\r\n        if (file.name.match(/lnk$/)) return false;\r\n        if (file.type === '' && file.size === 4096) return false;\r\n        return true;\r\n      });\r\n      if (filtered.length) onFileInput(filtered);\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    (evt: React.DragEvent) => {\r\n      evt.preventDefault();\r\n      setIsInDragMode(false);\r\n\r\n      const files = evt.dataTransfer.files;\r\n      if (files) checkFiles(Array.from(files));\r\n    },\r\n    [checkFiles],\r\n  );\r\n\r\n  const handleInput = useCallback(\r\n    (evt: InputFileChangeEvent) => {\r\n      const files = evt.target.files;\r\n      if (files) checkFiles(Array.from(files));\r\n    },\r\n    [checkFiles],\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleDragStart = () => setIsInDragMode(true);\r\n    const handleDragEnd = (evt: DragEvent) => {\r\n      if (evt.target === dropzoneRef.current) setIsInDragMode(false);\r\n    };\r\n\r\n    window.addEventListener('dragenter', handleDragStart);\r\n    window.addEventListener('dragleave', handleDragEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('dragenter', handleDragStart);\r\n      window.removeEventListener('dragleave', handleDragEnd);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Backdrop active={isInDragMode}>\r\n      <div ref={dropzoneRef} className={css.input} onDragOver={(evt) => evt.preventDefault()} onDrop={handleDrop}>\r\n        <input type=\"file\" name=\"files\" className=\"visually-hidden\" multiple onChange={handleInput} tabIndex={noFocus ? -1 : 0} />\r\n      </div>\r\n    </Backdrop>\r\n  );\r\n};\r\n\r\nexport default FileInput;\r\n","const RTCPeerConnectionConfig: RTCConfiguration = {\r\n  iceServers: [\r\n    { urls: ['stun:stun.l.google.com:19302'] },\r\n    { urls: ['stun:stun1.l.google.com:19302'] },\r\n    { urls: ['stun:stun2.l.google.com:19302'] },\r\n    { urls: ['stun:stun3.l.google.com:19302'] },\r\n    { urls: ['stun:stun4.l.google.com:19302'] },\r\n    { urls: ['stun:stun.voipstunt.com'] },\r\n  ],\r\n};\r\n\r\nclass WebRTCConnection {\r\n  connection: RTCPeerConnection;\r\n  messageChannel: RTCDataChannel;\r\n  onConnection = (status: RTCIceConnectionState) => {};\r\n  onMessage = (msg: string) => {};\r\n\r\n  constructor(config: RTCConfiguration = RTCPeerConnectionConfig) {\r\n    const connection = new RTCPeerConnection(config);\r\n    this.connection = connection;\r\n\r\n    const messageChannel = connection.createDataChannel('message');\r\n\r\n    this.messageChannel = messageChannel;\r\n\r\n    messageChannel.onmessage = (evt) => this.onMessage(evt.data);\r\n\r\n    connection.addEventListener('datachannel', ({ channel }) => {\r\n      if (channel.label === 'message') this.messageChannel = channel;\r\n    });\r\n    connection.addEventListener('iceconnectionstatechange', () => {\r\n      this.onConnection(connection.iceConnectionState);\r\n    });\r\n  }\r\n\r\n  get description() {\r\n    return JSON.stringify(this.connection.localDescription);\r\n  }\r\n\r\n  createOffer = () => {\r\n    const { connection } = this;\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n\r\n      await connection.setLocalDescription(await connection.createOffer());\r\n\r\n      connection.iceGatheringState !== 'complete' && resolve(this.description);\r\n    });\r\n  };\r\n\r\n  connect = (descr: string) => {\r\n    const { connection } = this;\r\n    const remote = new RTCSessionDescription(JSON.parse(descr));\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      await connection.setRemoteDescription(remote);\r\n\r\n      if (remote.type !== 'offer') return resolve();\r\n\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n      await connection.setLocalDescription(await connection.createAnswer());\r\n    });\r\n  };\r\n\r\n  sendMessage = (msg: string): void => {\r\n    const message = this.messageChannel;\r\n\r\n    if (message.readyState === 'open') return message.send(msg);\r\n    setTimeout(() => this.sendMessage(msg), 50);\r\n  };\r\n\r\n  sendJSON = (obj: object): void => {\r\n    this.sendMessage(JSON.stringify(obj));\r\n  };\r\n}\r\n\r\nexport default WebRTCConnection;\r\n","export type FileInfo = {\r\n  id: string;\r\n  name: string;\r\n  size: number;\r\n};\r\n\r\ntype FileData = FileInfo & {\r\n  downloadedSize: number;\r\n  data: ArrayBuffer[];\r\n};\r\n\r\ninterface IFileTransferInfo {\r\n  status: 'done' | 'new';\r\n  info?: FileInfo;\r\n}\r\n\r\nclass WebRTCFileChannel {\r\n  channel: RTCDataChannel;\r\n  private file: FileData | undefined;\r\n\r\n  onFileReady = (file: Blob, info: FileInfo): void => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n\r\n  constructor(connection: RTCPeerConnection, label: string) {\r\n    this.channel = connection.createDataChannel(label);\r\n    connection.addEventListener('datachannel', (evt) => {\r\n      if (evt.channel.label === label) this.channel = evt.channel;\r\n    });\r\n\r\n    this.channel.onmessage = (evt) => this.fileMessage(evt.data);\r\n  }\r\n\r\n  private fileMessage = (data: ArrayBuffer | string) => {\r\n    if (typeof data !== 'string') {\r\n      const file = this.file;\r\n\r\n      if (file) {\r\n        file.data.push(data);\r\n        file.downloadedSize += data.byteLength;\r\n        this.onFileProgress({\r\n          size: file.size,\r\n          downloaded: file.downloadedSize,\r\n          id: file.id,\r\n        });\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const json: IFileTransferInfo = JSON.parse(data);\r\n\r\n    if (json.status === 'new' && json.info) {\r\n      this.file = {\r\n        id: json.info.id,\r\n        name: json.info.name,\r\n        size: json.info.size,\r\n        downloadedSize: 0,\r\n        data: [],\r\n      };\r\n    } else if (json.status === 'done' && this.file) {\r\n      const fileInfo: FileInfo = {\r\n        id: this.file.id,\r\n        name: this.file.name,\r\n        size: this.file.size,\r\n      };\r\n      const file = new Blob(this.file.data);\r\n      this.onFileReady(file, fileInfo);\r\n      this.file = undefined;\r\n    }\r\n  };\r\n\r\n  private sendingFileQueue: {\r\n    file: File;\r\n    id: string;\r\n  }[] = [];\r\n  sendFile = (file: File, id: string) => {\r\n    const queue = this.sendingFileQueue;\r\n    queue.push({ file, id });\r\n\r\n    if (queue.length > 1) return;\r\n\r\n    this._sendFile();\r\n  };\r\n\r\n  private _sendFile = () => {\r\n    const queue = this.sendingFileQueue;\r\n    if (!queue.length) return;\r\n\r\n    const { file, id } = queue[0];\r\n    const chunkSize = 4 * 1024;\r\n\r\n    let offset = 0;\r\n    let isStarted = false;\r\n\r\n    const reader = new window.FileReader();\r\n    reader.onload = () => {\r\n      if (!reader.result || typeof reader.result === 'string') return;\r\n\r\n      if (!isStarted) {\r\n        const info: IFileTransferInfo = {\r\n          status: 'new',\r\n          info: {\r\n            id,\r\n            name: file.name,\r\n            size: file.size,\r\n          },\r\n        };\r\n\r\n        this.channel.send(JSON.stringify(info));\r\n        isStarted = true;\r\n      }\r\n\r\n      this.channel.send(reader.result);\r\n\r\n      offset += chunkSize;\r\n    };\r\n\r\n    reader.onloadend = () => {\r\n      if (offset < file.size) {\r\n        reader.readAsArrayBuffer(file.slice(offset, offset + chunkSize));\r\n      } else {\r\n        const info: IFileTransferInfo = { status: 'done' };\r\n        this.channel.send(JSON.stringify(info));\r\n        this.sendingFileQueue.shift();\r\n        this._sendFile();\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file.slice(offset, offset + chunkSize));\r\n  };\r\n}\r\n\r\nexport default WebRTCFileChannel;\r\n","import WebRTCConnection from './WebRTCConnection';\r\nimport WebRTCFileChannel, { FileInfo } from './WebRTCFileChannel';\r\n\r\nimport { tryParseJSON } from 'lib/helpers';\r\n\r\nclass WebRTCWithFileChannel extends WebRTCConnection {\r\n  fileChannel: WebRTCFileChannel;\r\n\r\n  onFile = (file: Blob, info: FileInfo) => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n  onRequestFile = (id: string): File | void => {};\r\n\r\n  constructor(config?: RTCConfiguration) {\r\n    super(config);\r\n\r\n    const fileChannel = new WebRTCFileChannel(this.connection, 'file');\r\n    this.fileChannel = fileChannel;\r\n\r\n    fileChannel.onFileReady = (file, info) => this.onFile(file, info);\r\n    fileChannel.onFileProgress = (info) => this.onFileProgress(info);\r\n\r\n    this.messageChannel.onmessage = this._onMessage;\r\n  }\r\n\r\n  private _onMessage = (evt: MessageEvent) => {\r\n    const asObj = tryParseJSON(evt.data);\r\n\r\n    if (asObj && asObj.action === 'sendFile') {\r\n      const file = this.onRequestFile(asObj.id);\r\n      if (file) this.sendFile(file, asObj.id);\r\n      return;\r\n    }\r\n\r\n    this.onMessage(evt.data);\r\n  };\r\n\r\n  sendFile = (file: File, id: string) => this.fileChannel.sendFile(file, id);\r\n\r\n  requestFile = (id: string) => {\r\n    this.sendJSON({ action: 'sendFile', id });\r\n  };\r\n}\r\n\r\nexport default WebRTCWithFileChannel;\r\n","import * as firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import firebase from './firebase';\r\n\r\ntype FirestoreConnections = firebase.firestore.CollectionReference<firebase.firestore.DocumentData>;\r\n\r\nclass FirestoreConnection {\r\n  private connections: FirestoreConnections;\r\n\r\n  constructor() {\r\n    this.connections = firebase.firestore().collection('connections');\r\n  }\r\n\r\n  private doc = (id: string) => this.connections.doc(id);\r\n  private add = (data: firebase.firestore.DocumentData) => this.connections.add(data);\r\n\r\n  getOffer = async (id: string): Promise<string | void> => {\r\n    const response = await this.doc(id).get();\r\n    const data = response.data();\r\n    if (data) return data.offer;\r\n  };\r\n\r\n  sendOffer = (offer: string) => this.add({ offer }).then(({ id }) => id);\r\n\r\n  getAnswer = (id: string) =>\r\n    new Promise<string>((resolve) => {\r\n      const removeListener = this.doc(id).onSnapshot((response) => {\r\n        const data = response.data();\r\n        if (!data || !data.answer) return;\r\n\r\n        resolve(data.answer);\r\n        removeListener();\r\n      });\r\n    });\r\n\r\n  sendAnswer = (id: string, answer: string) => this.doc(id).set({ answer }, { merge: true });\r\n}\r\n\r\nexport default FirestoreConnection;\r\n","import React from 'react';\r\nimport css from './Spinner.module.css';\r\n\r\nconst Spinner: React.FC = () => <span className={css.spinner} />;\r\n\r\nexport default Spinner;\r\n","import Home from './Home';\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport css from './Home.module.css';\r\n\r\nimport FileInput from 'Components/FileInput';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { hostAddFiles, hostSetConnection, hostClearFiles } from 'lib/redux';\r\nimport Spinner from 'Components/Spinner/Spinner';\r\nimport Backdrop from 'Components/Backdrop';\r\n\r\ninterface IHomeProps {\r\n  addConnection: typeof hostSetConnection;\r\n  addFiles: typeof hostAddFiles;\r\n  clearFiles: typeof hostClearFiles;\r\n}\r\n\r\nconst Home: React.FC<IHomeProps> = ({ addConnection, addFiles, clearFiles }) => {\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleFileInput = async (files: File[]) => {\r\n    const connection = new WebRTCWithFileChannel();\r\n    addConnection(connection);\r\n    clearFiles();\r\n    addFiles(files);\r\n\r\n    const firestoreCon = new FirestoreConnection();\r\n\r\n    setLoading(true);\r\n\r\n    const offer = await connection.createOffer();\r\n    const id = await firestoreCon.sendOffer(offer);\r\n\r\n    history.push(`/${id}`);\r\n    const answer = await firestoreCon.getAnswer(id);\r\n    connection.connect(answer);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={css.container}>\r\n        <h1 className={css.heading}>Share files easily</h1>\r\n        <p className={css.lead}>Drop files here or click to select</p>\r\n        <FileInput onFileInput={handleFileInput} />\r\n      </label>\r\n      <Backdrop active={loading}>\r\n        <div className={css.backdrop}>\r\n          <div className={css.spinnerContainer}>\r\n            <Spinner />\r\n          </div>\r\n        </div>\r\n      </Backdrop>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  addConnection: hostSetConnection,\r\n  addFiles: hostAddFiles,\r\n  clearFiles: hostClearFiles,\r\n})(Home);\r\n","import InputToClipboard from './InputToClipboard';\r\n\r\nexport default InputToClipboard;\r\n","import React, { useRef } from 'react';\r\nimport css from './InputToClipboard.module.css';\r\n\r\ninterface IInputToClipboardProps {\r\n  text: string;\r\n}\r\n\r\nconst InputToClipboard: React.FC<IInputToClipboardProps> = ({ text }) => {\r\n  const urlInput = useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    if (!navigator.clipboard) {\r\n      return urlInput.current?.focus();\r\n    }\r\n\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  const handleInputFocus = (evt: React.FocusEvent<HTMLInputElement>) => evt.target.select();\r\n\r\n  return (\r\n    <div className={css.inputGroup}>\r\n      <input ref={urlInput} className={css.input} readOnly value={text} onFocus={handleInputFocus} autoFocus />\r\n      <button className={css.btn} onClick={handleClick}>\r\n        <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href=\"icons.svg#copy\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputToClipboard;\r\n","import FileCard from './FileCard';\r\n\r\nexport default FileCard;\r\n","import React from 'react';\r\nimport css from './FileCard.module.css';\r\n\r\ninterface IFileCardProps {\r\n  name: string;\r\n  id: string;\r\n  onClick?: (id: string) => void;\r\n  progress?: number;\r\n  iconOnHover: string;\r\n}\r\n\r\nconst getIcon = (extention: string) => {\r\n  extention = extention.toLowerCase();\r\n  const icons: { [key: string]: string[] } = {\r\n    'file-text': ['txt', 'doc', 'docx', 'rtf', 'odt'],\r\n    'file-image': ['psd', 'tiff', 'tif', 'bmp', 'jpeg', 'jpg', 'gif', 'png', 'ico', 'webp', 'svg', 'eps', 'ai', 'heic', 'nef', 'crw', 'arw'],\r\n    'file-audio': ['ac3', 'aif', 'amr', 'aud', 'mp3', 'flac', 'iff', 'm4a', 'm4b', 'm4p', 'mid', 'mpa', 'ogg', 'wav', 'wave'],\r\n    'file-video': ['mp4', 'avi', 'mpg', 'mov', 'wmv', '3gp', 'flv', 'm4v', 'mts', 'ts', 'webm'],\r\n    'file-zip': ['zip', 'rar', '7z', 'jar', 'gz'],\r\n  };\r\n\r\n  for (const icon in icons) {\r\n    if (icons[icon].includes(extention)) return icon;\r\n  }\r\n\r\n  return 'file-empty';\r\n};\r\n\r\nconst FileCard: React.FC<IFileCardProps> = ({ name, id, onClick, progress, iconOnHover }) => {\r\n  const [extention] = name.match(/(?<=\\.)[a-zA-Z0-9]+$/) || [''];\r\n  const icon = getIcon(extention);\r\n\r\n  return (\r\n    <button className={css.card} onClick={() => onClick && onClick(id)}>\r\n      <div className={css.card_iconContainer}>\r\n        <svg className={css.card__icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href={`icons.svg#${icon}`} />\r\n        </svg>\r\n        <svg className={css.card__icon_hover} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href={`icons.svg#${iconOnHover}`} />\r\n        </svg>\r\n      </div>\r\n      <p className={css.card__title} title={name}>\r\n        {name}\r\n      </p>\r\n      <progress value={progress ?? 0} max={100} className={css.card__progress} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FileCard;\r\n","import FileList from './FileList';\r\n\r\nexport default FileList;\r\n","import React from 'react';\r\nimport css from './FileList.module.css';\r\nimport FileCard from 'Components/FileCard';\r\n\r\ninterface IFileListProps {\r\n  files: {\r\n    id: string;\r\n    name: string;\r\n    progress?: number;\r\n  }[];\r\n  onFileClick?: (id: string) => void;\r\n  appendComponent?: React.ReactNode;\r\n  iconOnHover: string;\r\n}\r\n\r\nconst FileList: React.FC<IFileListProps> = ({ files, onFileClick, appendComponent, iconOnHover }) => {\r\n  return (\r\n    <ul className={css.list}>\r\n      {files.map(({ id, name, progress }) => (\r\n        <li key={id}>\r\n          <FileCard name={name} id={id} onClick={onFileClick} progress={progress} iconOnHover={iconOnHover} />\r\n        </li>\r\n      ))}\r\n      {appendComponent ? <li>{appendComponent}</li> : null}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default FileList;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React, { ReactNode } from 'react';\r\n\r\nimport css from './Header.module.css';\r\n\r\ninterface IHeaderProps {\r\n  main: ReactNode | string;\r\n  lead: ReactNode | string;\r\n}\r\n\r\nconst Header: React.FC<IHeaderProps> = ({ main, lead }) => (\r\n  <header className={css.header}>\r\n    <h2 className={css.header__heading}>{main}</h2>\r\n    <p className={css.header__lead}>{lead}</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import AddFileCard from './AddFileCard';\r\n\r\nexport default AddFileCard;\r\n","import React, { useCallback } from 'react';\r\nimport css from './AddFileCard.module.css';\r\n\r\nconst AddFileCard: React.FC<{ onFileInput: (files: File[]) => void }> = ({ onFileInput }) => {\r\n  const handleFileInput = useCallback(\r\n    (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n      const files = Array.from(evt.target.files || []).filter((file) => {\r\n        if (file.size === 0) return false;\r\n        if (file.name.match(/lnk$/)) return false;\r\n        if (file.type === '' && file.size === 4096) return false;\r\n        return true;\r\n      });\r\n      if (files.length) onFileInput(files);\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  return (\r\n    <label className={css.addFiles}>\r\n      <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n        <use href=\"icons.svg#file-add\" />\r\n      </svg>\r\n      <span className={css.addFiles__caption}>Add Files</span>\r\n      <input type=\"file\" className=\"visually-hidden\" multiple onChange={handleFileInput} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default AddFileCard;\r\n","import Spinner from './Spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\n\r\nimport css from './ShareHost.module.css';\r\nimport InputToClipboard from 'Components/InputToClipboard';\r\nimport FileList from 'Components/FileList';\r\nimport FileInput from 'Components/FileInput';\r\nimport Header from 'Components/Header';\r\nimport AddFileCard from 'Components/AddFileCard';\r\nimport Spinner from 'Components/Spinner';\r\n\r\ninterface IShareHostProps {\r\n  files: { id: string; name: string }[];\r\n  addFiles: (files: File[]) => void;\r\n  removeFile: (id: string) => void;\r\n  connectionStatus: RTCIceConnectionState;\r\n}\r\n\r\nconst SpinnerComp = (\r\n  <>\r\n    waiting for connection\r\n    <span className={css.spinner}>\r\n      <Spinner />\r\n    </span>\r\n  </>\r\n);\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ files, addFiles, removeFile, connectionStatus }) => {\r\n  const mainText = connectionStatus === 'connected' ? 'Files can be downloaded now' : 'Share this link';\r\n  const leadText = connectionStatus === 'connected' ? \"don't close the tab until files are downloaded\" : SpinnerComp;\r\n\r\n  return (\r\n    <>\r\n      <Header main={mainText} lead={leadText} />\r\n      <div className={css.connectionBox}>\r\n        {connectionStatus !== 'connected' ? <InputToClipboard text={window.location.href} /> : <div className={css.connectionStatus}>Connected</div>}\r\n      </div>\r\n      <main className={css.container}>\r\n        <h2 className={css.heading}>Files</h2>\r\n        <FileList files={files} appendComponent={<AddFileCard onFileInput={addFiles} />} onFileClick={removeFile} iconOnHover=\"file-delete\"/>\r\n      </main>\r\n      <FileInput onFileInput={addFiles} noFocus />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareHost;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { hostAddFiles, hostRemoveFile, setConnectionStatus } from 'lib/redux';\r\nimport { formatFileData } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareHost';\r\n\r\ninterface IShareHostProps {\r\n  connection: WebRTCWithFileChannel;\r\n  connectionStatus: RTCIceConnectionState;\r\n  files: IHostFileStorage;\r\n  addFiles: typeof hostAddFiles;\r\n  removeFile: typeof hostRemoveFile;\r\n  setConnectionStatus: typeof setConnectionStatus;\r\n}\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ connection, files, addFiles, removeFile, connectionStatus, setConnectionStatus }) => {\r\n  useEffect(() => {\r\n    connection.onRequestFile = (id) => files[id];\r\n    connection.onConnection = (status) => {\r\n      setConnectionStatus(status);\r\n      if (status !== 'connected') return;\r\n      connection.sendJSON({ action: 'addFiles', files: formatFileData(files) });\r\n    };\r\n  }, [connection, files, setConnectionStatus]);\r\n\r\n  const handleAddFiles = useCallback(\r\n    (files: File[]) => {\r\n      const { payload } = addFiles(files);\r\n      connection.sendJSON({\r\n        action: 'addFiles',\r\n        files: formatFileData(payload),\r\n      });\r\n    },\r\n    [connection, addFiles],\r\n  );\r\n\r\n  const handleRemoveFile = useCallback(\r\n    (id: string) => {\r\n      removeFile(id);\r\n      connection.sendJSON({\r\n        action: 'removeFile',\r\n        id,\r\n      });\r\n    },\r\n    [connection, removeFile],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => ({ id, name: files[id].name }));\r\n\r\n  return <Share addFiles={handleAddFiles} files={filesList} removeFile={handleRemoveFile} connectionStatus={connectionStatus} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({\r\n  files: state.hostFiles,\r\n  connectionStatus: state.connection.status,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addFiles: hostAddFiles, removeFile: hostRemoveFile, setConnectionStatus })(ShareHost);\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React from 'react';\r\n\r\nimport css from './ShareClient.module.css';\r\nimport FileList from 'Components/FileList';\r\nimport Header from 'Components/Header';\r\nimport Spinner from 'Components/Spinner';\r\n\r\ninterface IShareClientProps {\r\n  files: { id: string; name: string; progress?: number }[];\r\n  requestFile: (id: string) => void;\r\n  connectionStatus: RTCIceConnectionState;\r\n}\r\n\r\nconst ShareClient: React.FC<IShareClientProps> = ({ files, requestFile, connectionStatus }) => {\r\n  const leadText = connectionStatus === 'connected' ? 'click on file to start download' : 'connecting';\r\n\r\n  return (\r\n    <>\r\n      <Header main=\"Download files\" lead={leadText} />\r\n      <div className={css.connectionBox}>\r\n        {connectionStatus !== 'connected' ? (\r\n          <div className={css.spinner}>\r\n            <Spinner />\r\n          </div>\r\n        ) : (\r\n          <div className={css.connectionStatus}>You are connected</div>\r\n        )}\r\n      </div>\r\n      <main className={css.container}>\r\n        <h2 className={css.heading}>Files</h2>\r\n        {Object.keys(files).length ? <FileList files={files} onFileClick={requestFile} iconOnHover=\"file-download\" /> : <h3 className={css.noFiles}>There's no files yet :(</h3>}\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareClient;\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { clientAddFiles, clientRemoveFile, setDownloadProgress, saveFileData, setConnectionStatus } from 'lib/redux';\r\nimport { tryParseJSON, saveFile } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareClient';\r\n\r\ninterface ISShareClientProps {\r\n  connection: WebRTCWithFileChannel;\r\n  connectionStatus: RTCIceConnectionState;\r\n  files: IClientFileStorage;\r\n  addFiles: typeof clientAddFiles;\r\n  removeFile: typeof clientRemoveFile;\r\n  setDownloadProgress: typeof setDownloadProgress;\r\n  saveFileData: typeof saveFileData;\r\n  setConnectionStatus: typeof setConnectionStatus;\r\n}\r\n\r\nconst ShareClient: React.FC<ISShareClientProps> = ({ connection, connectionStatus, files, addFiles, removeFile, setDownloadProgress, saveFileData, setConnectionStatus }) => {\r\n  useEffect(() => {\r\n    connection.onMessage = (msg) => {\r\n      const obj = tryParseJSON(msg);\r\n      if (!obj) return;\r\n      switch (obj.action) {\r\n        case 'addFiles':\r\n          return addFiles(obj.files);\r\n        case 'removeFile':\r\n          return removeFile(obj.id);\r\n      }\r\n    };\r\n    connection.onFileProgress = ({ downloaded, id }) => {\r\n      setDownloadProgress(id, downloaded);\r\n    };\r\n    connection.onConnection = setConnectionStatus;\r\n  }, [connection, addFiles, removeFile, setDownloadProgress, setConnectionStatus]);\r\n\r\n  useEffect(() => {\r\n    connection.onFile = (file, info) => {\r\n      saveFileData(info.id, file);\r\n      saveFile(file, info.name);\r\n    };\r\n  }, [connection, saveFileData]);\r\n\r\n  const handleRequestFile = useCallback(\r\n    (id: string) => {\r\n      const file = files[id];\r\n      if (file.file) return saveFile(file.file, file.name);\r\n      if (file.downloadedSize) return;\r\n\r\n      setDownloadProgress(id, 1);\r\n      connection.requestFile(id);\r\n    },\r\n    [connection, files, setDownloadProgress],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => {\r\n    const file = files[id];\r\n    const fileInfo: { id: string; name: string; progress?: number } = { id, name: file.name };\r\n    if (file.downloadedSize) fileInfo.progress = (file.downloadedSize / file.size) * 100;\r\n    return fileInfo;\r\n  });\r\n\r\n  return <Share files={filesList} requestFile={handleRequestFile} connectionStatus={connectionStatus} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({ files: state.clientFiles, connectionStatus: state.connection.status });\r\n\r\nexport default connect(mapStateToProps, {\r\n  addFiles: clientAddFiles,\r\n  removeFile: clientRemoveFile,\r\n  setDownloadProgress,\r\n  saveFileData,\r\n  setConnectionStatus,\r\n})(ShareClient);\r\n","import Share from './Share';\r\n\r\nexport default Share;\r\n","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ShareHost from 'Containers/ShareHost';\r\nimport ShareClient from 'Containers/ShareClient';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { clientSetConnection } from 'lib/redux';\r\n\r\ninterface IShareProps {\r\n  isHost: boolean;\r\n  connection: WebRTCWithFileChannel | undefined;\r\n  clientSetConnection: typeof clientSetConnection;\r\n}\r\n\r\nconst Share: React.FC<IShareProps> = ({ isHost, connection, clientSetConnection }) => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  if (connection) {\r\n    return isHost ? <ShareHost connection={connection} /> : <ShareClient connection={connection} />;\r\n  }\r\n\r\n  if (isHost || !id) {\r\n    history.replace('/');\r\n    return <></>;\r\n  }\r\n\r\n  const newConnection = new WebRTCWithFileChannel();\r\n  const firebaseConnection = new FirestoreConnection();\r\n\r\n  clientSetConnection(newConnection);\r\n\r\n  firebaseConnection\r\n    .getOffer(id)\r\n    .then((offer) => {\r\n      if (!offer) throw new Error(`Can't get offer`);\r\n      return newConnection.connect(offer);\r\n    })\r\n    .then((answer) => firebaseConnection.sendAnswer(id, answer))\r\n    .catch(() => {\r\n      history.replace('/');\r\n    });\r\n\r\n  return <div>Loading...</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    isHost: state.connection.isHost,\r\n    connection: state.connection.connection,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { clientSetConnection })(Share);\r\n","import React from 'react';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\n\r\nimport Home from 'Pages/Home';\r\nimport Share from 'Pages/Share';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route path=\"/:id\">\r\n            <Share />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'lib/redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
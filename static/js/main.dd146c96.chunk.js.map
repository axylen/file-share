{"version":3,"sources":["Components/FileCard/FileCard.module.css","Components/InputToClipboard/InputToClipboard.module.css","Components/ShareHost/ShareHost.module.css","Components/Header/Header.module.css","Components/AddFileCard/AddFileCard.module.css","Components/FileInput/FileInput.module.css","Components/ShareClient/ShareClient.module.css","Pages/Home/Home.module.css","Components/FileList/FileList.module.css","lib/helpers/classnames.tsx","lib/helpers/tryParseJSON.ts","lib/helpers/mapObject.ts","lib/helpers/formatFileData.ts","lib/helpers/saveFile.ts","lib/redux/action/actions.ts","lib/helpers/generateFileId.ts","lib/redux/action/types.ts","lib/redux/reducer/connection.ts","lib/redux/reducer/hostFiles.ts","lib/redux/reducer/clientFiles.ts","lib/redux/reducer/index.ts","lib/redux/store.ts","Components/FileInput/index.tsx","Components/FileInput/FileInput.tsx","lib/webrtc/WebRTCConnection.ts","lib/webrtc/WebRTCFileChannel.ts","lib/webrtc/WebRTCWithFileChannel.ts","lib/firebase/firebase.ts","lib/firebase/FirestoreConnection.ts","Pages/Home/index.tsx","Pages/Home/Home.tsx","Components/InputToClipboard/index.ts","Components/InputToClipboard/InputToClipboard.tsx","Components/FileCard/index.ts","Components/FileCard/FileCard.tsx","Components/FileList/index.ts","Components/FileList/FileList.tsx","Components/Header/index.ts","Components/Header/Header.tsx","Components/AddFileCard/index.ts","Components/AddFileCard/AddFileCard.tsx","Components/ShareHost/index.ts","Components/ShareHost/ShareHost.tsx","Containers/ShareHost/index.ts","Containers/ShareHost/ShareHost.tsx","Components/ShareClient/index.ts","Components/ShareClient/ShareClient.tsx","Containers/ShareClient/index.ts","Containers/ShareClient/ShareClient.tsx","Pages/Share/index.tsx","Pages/Share/Share.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","classnames","classes","Array","isArray","join","Object","keys","filter","cn","tryParseJSON","str","JSON","parse","mapObject","obj","cb","newObj","id","files","name","size","file","link","document","createElement","href","URL","createObjectURL","body","appendChild","download","click","window","revokeObjectURL","remove","hostAddFiles","filesWithId","forEach","lastModified","generateFileId","type","payload","initState","isHost","status","combined","combineReducers","connection","state","action","hostFiles","clientFiles","downloadedSize","store","createStore","rootReducer","FileInput","onFileInput","noFocus","useState","isInDragMode","setIsInDragMode","dropzoneRef","useRef","handleDrop","useCallback","evt","preventDefault","dataTransfer","from","handleInput","target","useEffect","handleDragStart","handleDragEnd","current","addEventListener","removeEventListener","dropzoneClasses","css","input","inputActive","ref","className","onDragOver","onDrop","multiple","onChange","tabIndex","RTCPeerConnectionConfig","iceServers","urls","WebRTCConnection","config","messageChannel","onConnection","onMessage","msg","createOffer","Promise","resolve","a","onicecandidate","candidate","description","setLocalDescription","iceGatheringState","connect","descr","remote","RTCSessionDescription","setRemoteDescription","createAnswer","sendMessage","message","readyState","send","setTimeout","sendJSON","stringify","RTCPeerConnection","this","createDataChannel","onmessage","data","channel","label","iceConnectionState","localDescription","WebRTCFileChannel","onFileReady","info","onFileProgress","fileMessage","json","fileInfo","Blob","undefined","push","byteLength","downloaded","sendingFileQueue","sendFile","queue","length","_sendFile","offset","isStarted","reader","FileReader","onload","result","onloadend","readAsArrayBuffer","slice","shift","WebRTCWithFileChannel","fileChannel","onFile","onRequestFile","_onMessage","asObj","requestFile","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FirestoreConnection","connections","doc","add","getOffer","get","response","offer","sendOffer","then","getAnswer","removeListener","onSnapshot","answer","sendAnswer","set","merge","firestore","collection","Home","addConnection","addFiles","clearFiles","history","useHistory","handleFileInput","firestoreCon","container","InputToClipboard","text","urlInput","inputGroup","readOnly","value","onFocus","select","autoFocus","btn","onClick","navigator","clipboard","focus","writeText","icon","xmlns","width","height","FileCard","progress","match","extention","toLowerCase","icons","includes","getIcon","card","card__icon","card__title","title","max","card__progress","FileList","onFileClick","appendComponent","list","map","key","Header","main","lead","header","header__heading","header__lead","AddFileCard","addFiles__caption","ShareHost","removeFile","connectionStatus","mainText","leadText","urlBox","location","heading","setConnectionStatus","formatFileData","handleAddFiles","handleRemoveFile","filesList","ShareClient","setDownloadProgress","saveFileData","saveFile","handleRequestFile","Share","clientSetConnection","useParams","replace","newConnection","firebaseConnection","Error","catch","App","path","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.dd146c96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"FileCard_card__2LQTx\",\"card__icon\":\"FileCard_card__icon__3au0f\",\"icon\":\"FileCard_icon__2MZPN\",\"card__title\":\"FileCard_card__title__3F9SZ\",\"card__progress\":\"FileCard_card__progress__13gjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"InputToClipboard_inputGroup__1K_jF\",\"input\":\"InputToClipboard_input__aZxeq\",\"btn\":\"InputToClipboard_btn__13k-2\",\"icon\":\"InputToClipboard_icon__xv5Og\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareHost_heading__3e1Cg\",\"urlBox\":\"ShareHost_urlBox__qbpUI\",\"container\":\"ShareHost_container__3R05H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Q76hA\",\"header__heading\":\"Header_header__heading__BlGzf\",\"header__lead\":\"Header_header__lead__1jR8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addFiles\":\"AddFileCard_addFiles__1Cp53\",\"addFiles__caption\":\"AddFileCard_addFiles__caption__1oLnV\",\"icon\":\"AddFileCard_icon__2tDcj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FileInput_input__3v6pL\",\"inputActive\":\"FileInput_inputActive__3STcl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareClient_heading__VAHtz\",\"container\":\"ShareClient_container__22l9m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__q5gBo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FileList_list__3k0mc\"};","interface ClassObject {\r\n  [index: string]: boolean;\r\n}\r\n\r\nconst classnames = (classes: ClassObject | string[]) => {\r\n  if (Array.isArray(classes)) return classes.join(' ');\r\n\r\n  return Object.keys(classes)\r\n    .filter((cn) => classes[cn])\r\n    .join(' ');\r\n};\r\n\r\nexport default classnames;\r\n","const tryParseJSON = (str: string): any | null => {\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default tryParseJSON;\r\n","type Object = { [key: string]: any };\r\n\r\ntype Callback = (value?: any, key?: string, object?: Object) => any;\r\n\r\nconst mapObject = (obj: Object, cb: Callback) => {\r\n  const newObj: any = {};\r\n  for (const id in obj) {\r\n    newObj[id] = cb(obj[id], id, obj);\r\n  }\r\n  return newObj;\r\n};\r\n\r\nexport default mapObject;\r\n","import mapObject from './mapObject';\r\n\r\ntype FileInfo = { name: string; size: number };\r\n\r\nexport default (files: IHostFileStorage): FileInfo => {\r\n  return mapObject(files, ({ name, size }) => ({ name, size }));\r\n};\r\n","export default (file: Blob, name: string) => {\r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(file);\r\n  document.body.appendChild(link);\r\n  link.download = name;\r\n  link.click();\r\n  window.URL.revokeObjectURL(link.href);\r\n  link.remove();\r\n};\r\n","import { generateFileId } from 'lib/helpers';\r\n\r\nimport {\r\n  SET_CONNECTION,\r\n  SET_CONNECTION_STATUS,\r\n  HOST_ADD_FILES,\r\n  HOST_REMOVE_FILE,\r\n  HOST_CLEAR_FILES,\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from './types';\r\n\r\nexport const hostSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: true, connection },\r\n});\r\nexport const clientSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: false, connection },\r\n});\r\nexport const setConnectionStatus = (status: RTCIceConnectionState): IConnectionStatusAction => ({\r\n  type: SET_CONNECTION_STATUS,\r\n  payload: { status },\r\n});\r\n\r\nexport const hostAddFiles = (files: File[]): IHostAddFilesAction => {\r\n  const filesWithId: { [key: string]: File } = {};\r\n  files.forEach((file) => (filesWithId[generateFileId(file)] = file));\r\n\r\n  return { type: HOST_ADD_FILES, payload: filesWithId };\r\n};\r\nexport const clientAddFiles = (files: IClientFileStorage): IClientAddFilesAction => ({\r\n  type: CLIENT_ADD_FILES,\r\n  payload: files,\r\n});\r\n\r\nexport const hostRemoveFile = (id: string): IHostRemoveFileAction => ({\r\n  type: HOST_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\nexport const clientRemoveFile = (id: string): IClientRemoveFileAction => ({\r\n  type: CLIENT_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\n\r\nexport const hostClearFiles = (): IHostClearFilesAction => {\r\n  return { type: HOST_CLEAR_FILES };\r\n};\r\n\r\nexport const setDownloadProgress = (id: string, size: number): IClientDownloadProgressAction => ({\r\n  type: SET_DOWNLOAD_PROGRESS,\r\n  payload: { id, downloadedSize: size },\r\n});\r\nexport const saveFileData = (id: string, file: Blob): IClientSaveFileDataAction => ({\r\n  type: SAVE_FILE_DATA,\r\n  payload: { id, file },\r\n});\r\n","export default (file: File) => `${file.lastModified}${file.size}${file.name}`;\r\n","export const HOST_ADD_FILES = 'HOST_ADD_FILES';\r\nexport const HOST_REMOVE_FILE = 'HOST_REMOVE_FILE';\r\nexport const HOST_CLEAR_FILES = 'HOST_CLEAR_FILES';\r\n\r\nexport const CLIENT_ADD_FILES = 'CLIENT_ADD_FILES';\r\nexport const CLIENT_REMOVE_FILE = 'CLIENT_REMOVE_FILE';\r\n\r\nexport const SET_CONNECTION = 'SET_CONNECTION';\r\nexport const SET_CONNECTION_STATUS = 'SET_CONNECTION_STATUS';\r\n\r\nexport const SET_DOWNLOAD_PROGRESS = 'SET_DOWNLOAD_PROGRESS';\r\nexport const SAVE_FILE_DATA = 'SAVE_FILE_DATA';\r\n","import { SET_CONNECTION, SET_CONNECTION_STATUS } from '../action';\r\n\r\ninterface IConnectionInfo {\r\n  isHost: boolean;\r\n  connection?: WebRTCWithFileChannel;\r\n  status: RTCIceConnectionState;\r\n}\r\n\r\ndeclare global {\r\n  interface IConnectionAction {\r\n    type: typeof SET_CONNECTION;\r\n    payload: {\r\n      isHost: boolean;\r\n      connection: WebRTCWithFileChannel;\r\n    };\r\n  }\r\n  interface IConnectionStatusAction {\r\n    type: typeof SET_CONNECTION_STATUS;\r\n    payload: { status: RTCIceConnectionState };\r\n  }\r\n}\r\n\r\nconst initState: IConnectionInfo = {\r\n  isHost: false,\r\n  status: 'new',\r\n};\r\n\r\ntype Action = IConnectionAction | IConnectionStatusAction;\r\n\r\nexport default (state: IConnectionInfo = initState, action: Action): IConnectionInfo => {\r\n  switch (action.type) {\r\n    case SET_CONNECTION:\r\n      return { ...state, ...action.payload };\r\n    case SET_CONNECTION_STATUS:\r\n      return { ...state, ...action.payload };\r\n  }\r\n  return state;\r\n};\r\n","import { HOST_ADD_FILES, HOST_REMOVE_FILE, HOST_CLEAR_FILES } from '../action';\r\n\r\ndeclare global {\r\n  interface IHostFileStorage {\r\n    [key: string]: File;\r\n  }\r\n  interface IHostAddFilesAction {\r\n    type: typeof HOST_ADD_FILES;\r\n    payload: IHostFileStorage;\r\n  }\r\n  interface IHostRemoveFileAction {\r\n    type: typeof HOST_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n  interface IHostClearFilesAction {\r\n    type: typeof HOST_CLEAR_FILES;\r\n  }\r\n}\r\ntype Action = IHostAddFilesAction | IHostRemoveFileAction | IHostClearFilesAction;\r\n\r\nconst initState: IHostFileStorage = {};\r\n\r\nexport default (state: IHostFileStorage = initState, action: Action): IHostFileStorage => {\r\n  switch (action.type) {\r\n    case HOST_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case HOST_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n    case HOST_CLEAR_FILES:\r\n      return {};\r\n  }\r\n  return state;\r\n};\r\n","import {\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from '../action';\r\n\r\ndeclare global {\r\n  interface IClientFileStorage {\r\n    [key: string]: {\r\n      name: string;\r\n      size: number;\r\n      downloadedSize?: number;\r\n      file?: Blob;\r\n    };\r\n  }\r\n  interface IClientAddFilesAction {\r\n    type: typeof CLIENT_ADD_FILES;\r\n    payload: IClientFileStorage;\r\n  }\r\n  interface IClientRemoveFileAction {\r\n    type: typeof CLIENT_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n  interface IClientDownloadProgressAction {\r\n    type: typeof SET_DOWNLOAD_PROGRESS;\r\n    payload: { id: string; downloadedSize: number };\r\n  }\r\n  interface IClientSaveFileDataAction {\r\n    type: typeof SAVE_FILE_DATA;\r\n    payload: { id: string; file: Blob };\r\n  }\r\n}\r\n\r\ntype Action =\r\n  | IClientAddFilesAction\r\n  | IClientRemoveFileAction\r\n  | IClientDownloadProgressAction\r\n  | IClientSaveFileDataAction;\r\n\r\nconst initState: IClientFileStorage = {};\r\n\r\nexport default (state: IClientFileStorage = initState, action: Action): IClientFileStorage => {\r\n  switch (action.type) {\r\n    case CLIENT_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case CLIENT_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n    case SET_DOWNLOAD_PROGRESS: {\r\n      const files = { ...state };\r\n      files[action.payload.id].downloadedSize = action.payload.downloadedSize;\r\n      return files;\r\n    }\r\n    case SAVE_FILE_DATA: {\r\n      const files = { ...state };\r\n      files[action.payload.id].file = action.payload.file;\r\n      return files;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport connection from './connection';\r\nimport hostFiles from './hostFiles';\r\nimport clientFiles from './clientFiles';\r\n\r\nconst combined = combineReducers({ connection, hostFiles, clientFiles });\r\n\r\ndeclare global {\r\n  type ReduxStore = ReturnType<typeof combined>;\r\n}\r\n\r\nexport default combined;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import FileInput from './FileInput';\r\n\r\nexport default FileInput;\r\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport css from './FileInput.module.css';\r\n\r\nimport { classnames } from 'lib/helpers';\r\n\r\ninterface IFileInputProps {\r\n  onFileInput: (files: File[]) => void;\r\n  noFocus?: boolean;\r\n}\r\n\r\ntype InputFileChangeEvent = React.ChangeEvent<HTMLInputElement>;\r\n\r\nconst FileInput: React.FC<IFileInputProps> = ({ onFileInput, noFocus }) => {\r\n  const [isInDragMode, setIsInDragMode] = useState(false);\r\n  const dropzoneRef = useRef<HTMLDivElement>(null);\r\n\r\n  const handleDrop = useCallback(\r\n    (evt: React.DragEvent) => {\r\n      evt.preventDefault();\r\n      setIsInDragMode(false);\r\n\r\n      const files = evt.dataTransfer.files;\r\n      if (files) onFileInput(Array.from(files));\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  const handleInput = useCallback(\r\n    (evt: InputFileChangeEvent) => {\r\n      const files = evt.target.files;\r\n      if (files) onFileInput(Array.from(files));\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleDragStart = () => setIsInDragMode(true);\r\n    const handleDragEnd = (evt: DragEvent) => {\r\n      if (evt.target === dropzoneRef.current) setIsInDragMode(false);\r\n    };\r\n\r\n    window.addEventListener('dragenter', handleDragStart);\r\n    window.addEventListener('dragleave', handleDragEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('dragenter', handleDragStart);\r\n      window.removeEventListener('dragleave', handleDragEnd);\r\n    };\r\n  }, []);\r\n\r\n  const dropzoneClasses = {\r\n    [css.input]: true,\r\n    [css.inputActive]: isInDragMode,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={dropzoneRef}\r\n      className={classnames(dropzoneClasses)}\r\n      onDragOver={(evt) => evt.preventDefault()}\r\n      onDrop={handleDrop}>\r\n      <input\r\n        type=\"file\"\r\n        name=\"files\"\r\n        className=\"visually-hidden\"\r\n        multiple\r\n        onChange={handleInput}\r\n        tabIndex={noFocus ? -1 : 0}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileInput;\r\n","const RTCPeerConnectionConfig: RTCConfiguration = {\r\n  iceServers: [\r\n    { urls: ['stun:stun.l.google.com:19302'] },\r\n    { urls: ['stun:stun1.l.google.com:19302'] },\r\n    { urls: ['stun:stun2.l.google.com:19302'] },\r\n    { urls: ['stun:stun3.l.google.com:19302'] },\r\n    { urls: ['stun:stun4.l.google.com:19302'] },\r\n    { urls: ['stun:stun.voipstunt.com'] },\r\n  ],\r\n};\r\n\r\nclass WebRTCConnection {\r\n  connection: RTCPeerConnection;\r\n  messageChannel: RTCDataChannel;\r\n  onConnection = (status: RTCIceConnectionState) => {};\r\n  onMessage = (msg: string) => {};\r\n\r\n  constructor(config: RTCConfiguration = RTCPeerConnectionConfig) {\r\n    const connection = new RTCPeerConnection(config);\r\n    this.connection = connection;\r\n\r\n    const messageChannel = connection.createDataChannel('message');\r\n\r\n    this.messageChannel = messageChannel;\r\n\r\n    messageChannel.onmessage = (evt) => this.onMessage(evt.data);\r\n\r\n    connection.addEventListener('datachannel', ({ channel }) => {\r\n      if (channel.label === 'message') this.messageChannel = channel;\r\n    });\r\n    connection.addEventListener('iceconnectionstatechange', () => {\r\n      this.onConnection(connection.iceConnectionState);\r\n    });\r\n  }\r\n\r\n  get description() {\r\n    return JSON.stringify(this.connection.localDescription);\r\n  }\r\n\r\n  createOffer = () => {\r\n    const { connection } = this;\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n\r\n      await connection.setLocalDescription(await connection.createOffer());\r\n\r\n      connection.iceGatheringState !== 'complete' && resolve(this.description);\r\n    });\r\n  };\r\n\r\n  connect = (descr: string) => {\r\n    const { connection } = this;\r\n    const remote = new RTCSessionDescription(JSON.parse(descr));\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      await connection.setRemoteDescription(remote);\r\n\r\n      if (remote.type !== 'offer') return resolve();\r\n\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n      await connection.setLocalDescription(await connection.createAnswer());\r\n    });\r\n  };\r\n\r\n  sendMessage = (msg: string): void => {\r\n    const message = this.messageChannel;\r\n\r\n    if (message.readyState === 'open') return message.send(msg);\r\n    setTimeout(() => this.sendMessage(msg), 50);\r\n  };\r\n\r\n  sendJSON = (obj: object): void => {\r\n    this.sendMessage(JSON.stringify(obj));\r\n  };\r\n}\r\n\r\nexport default WebRTCConnection;\r\n","export type FileInfo = {\r\n  id: string;\r\n  name: string;\r\n  size: number;\r\n};\r\n\r\ntype FileData = FileInfo & {\r\n  downloadedSize: number;\r\n  data: ArrayBuffer[];\r\n};\r\n\r\ninterface IFileTransferInfo {\r\n  status: 'done' | 'new';\r\n  info?: FileInfo;\r\n}\r\n\r\nclass WebRTCFileChannel {\r\n  channel: RTCDataChannel;\r\n  private file: FileData | undefined;\r\n\r\n  onFileReady = (file: Blob, info: FileInfo): void => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n\r\n  constructor(connection: RTCPeerConnection, label: string) {\r\n    this.channel = connection.createDataChannel(label);\r\n    connection.addEventListener('datachannel', (evt) => {\r\n      if (evt.channel.label === label) this.channel = evt.channel;\r\n    });\r\n\r\n    this.channel.onmessage = (evt) => this.fileMessage(evt.data);\r\n  }\r\n\r\n  private fileMessage = (data: ArrayBuffer | string) => {\r\n    if (typeof data !== 'string') {\r\n      const file = this.file;\r\n\r\n      if (file) {\r\n        file.data.push(data);\r\n        file.downloadedSize += data.byteLength;\r\n        this.onFileProgress({\r\n          size: file.size,\r\n          downloaded: file.downloadedSize,\r\n          id: file.id,\r\n        });\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const json: IFileTransferInfo = JSON.parse(data);\r\n\r\n    if (json.status === 'new' && json.info) {\r\n      this.file = {\r\n        id: json.info.id,\r\n        name: json.info.name,\r\n        size: json.info.size,\r\n        downloadedSize: 0,\r\n        data: [],\r\n      };\r\n    } else if (json.status === 'done' && this.file) {\r\n      const fileInfo: FileInfo = {\r\n        id: this.file.id,\r\n        name: this.file.name,\r\n        size: this.file.size,\r\n      };\r\n      const file = new Blob(this.file.data);\r\n      this.onFileReady(file, fileInfo);\r\n      this.file = undefined;\r\n    }\r\n  };\r\n\r\n  private sendingFileQueue: {\r\n    file: File;\r\n    id: string;\r\n  }[] = [];\r\n  sendFile = (file: File, id: string) => {\r\n    const queue = this.sendingFileQueue;\r\n    queue.push({ file, id });\r\n\r\n    if (queue.length > 1) return;\r\n\r\n    this._sendFile();\r\n  };\r\n\r\n  private _sendFile = () => {\r\n    const queue = this.sendingFileQueue;\r\n    if (!queue.length) return;\r\n\r\n    const { file, id } = queue[0];\r\n    const chunkSize = 4 * 1024;\r\n\r\n    let offset = 0;\r\n    let isStarted = false;\r\n\r\n    const reader = new window.FileReader();\r\n    reader.onload = () => {\r\n      if (!reader.result || typeof reader.result === 'string') return;\r\n\r\n      if (!isStarted) {\r\n        const info: IFileTransferInfo = {\r\n          status: 'new',\r\n          info: {\r\n            id,\r\n            name: file.name,\r\n            size: file.size,\r\n          },\r\n        };\r\n\r\n        this.channel.send(JSON.stringify(info));\r\n        isStarted = true;\r\n      }\r\n\r\n      this.channel.send(reader.result);\r\n\r\n      offset += chunkSize;\r\n    };\r\n\r\n    reader.onloadend = () => {\r\n      if (offset < file.size) {\r\n        reader.readAsArrayBuffer(file.slice(offset, offset + chunkSize));\r\n      } else {\r\n        const info: IFileTransferInfo = { status: 'done' };\r\n        this.channel.send(JSON.stringify(info));\r\n        this.sendingFileQueue.shift();\r\n        this._sendFile();\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file.slice(offset, offset + chunkSize));\r\n  };\r\n}\r\n\r\nexport default WebRTCFileChannel;\r\n","import WebRTCConnection from './WebRTCConnection';\r\nimport WebRTCFileChannel, { FileInfo } from './WebRTCFileChannel';\r\n\r\nimport { tryParseJSON } from 'lib/helpers';\r\n\r\nclass WebRTCWithFileChannel extends WebRTCConnection {\r\n  fileChannel: WebRTCFileChannel;\r\n\r\n  onFile = (file: Blob, info: FileInfo) => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n  onRequestFile = (id: string): File | void => {};\r\n\r\n  constructor(config?: RTCConfiguration) {\r\n    super(config);\r\n\r\n    const fileChannel = new WebRTCFileChannel(this.connection, 'file');\r\n    this.fileChannel = fileChannel;\r\n\r\n    fileChannel.onFileReady = (file, info) => this.onFile(file, info);\r\n    fileChannel.onFileProgress = (info) => this.onFileProgress(info);\r\n\r\n    this.messageChannel.onmessage = this._onMessage;\r\n  }\r\n\r\n  private _onMessage = (evt: MessageEvent) => {\r\n    const asObj = tryParseJSON(evt.data);\r\n\r\n    if (asObj && asObj.action === 'sendFile') {\r\n      const file = this.onRequestFile(asObj.id);\r\n      if (file) this.sendFile(file, asObj.id);\r\n      return;\r\n    }\r\n\r\n    this.onMessage(evt.data);\r\n  };\r\n\r\n  sendFile = (file: File, id: string) => this.fileChannel.sendFile(file, id);\r\n\r\n  requestFile = (id: string) => {\r\n    this.sendJSON({ action: 'sendFile', id });\r\n  };\r\n}\r\n\r\nexport default WebRTCWithFileChannel;\r\n","import * as firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import firebase from './firebase';\r\n\r\ntype FirestoreConnections = firebase.firestore.CollectionReference<firebase.firestore.DocumentData>;\r\n\r\nclass FirestoreConnection {\r\n  private connections: FirestoreConnections;\r\n\r\n  constructor() {\r\n    this.connections = firebase.firestore().collection('connections');\r\n  }\r\n\r\n  private doc = (id: string) => this.connections.doc(id);\r\n  private add = (data: firebase.firestore.DocumentData) => this.connections.add(data);\r\n\r\n  getOffer = async (id: string): Promise<string | void> => {\r\n    const response = await this.doc(id).get();\r\n    const data = response.data();\r\n    if (data) return data.offer;\r\n  };\r\n\r\n  sendOffer = (offer: string) => this.add({ offer }).then(({ id }) => id);\r\n\r\n  getAnswer = (id: string) =>\r\n    new Promise<string>((resolve) => {\r\n      const removeListener = this.doc(id).onSnapshot((response) => {\r\n        const data = response.data();\r\n        if (!data || !data.answer) return;\r\n\r\n        resolve(data.answer);\r\n        removeListener();\r\n      });\r\n    });\r\n\r\n  sendAnswer = (id: string, answer: string) => this.doc(id).set({ answer }, { merge: true });\r\n}\r\n\r\nexport default FirestoreConnection;\r\n","import Home from './Home';\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport css from './Home.module.css';\r\n\r\nimport FileInput from 'Components/FileInput';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { hostAddFiles, hostSetConnection, hostClearFiles } from 'lib/redux';\r\n\r\ninterface IHomeProps {\r\n  addConnection: typeof hostSetConnection;\r\n  addFiles: typeof hostAddFiles;\r\n  clearFiles: typeof hostClearFiles;\r\n}\r\n\r\nconst Home: React.FC<IHomeProps> = ({ addConnection, addFiles, clearFiles }) => {\r\n  const history = useHistory();\r\n\r\n  const handleFileInput = async (files: File[]) => {\r\n    const connection = new WebRTCWithFileChannel();\r\n    addConnection(connection);\r\n    clearFiles();\r\n    addFiles(files);\r\n\r\n    const firestoreCon = new FirestoreConnection();\r\n\r\n    const offer = await connection.createOffer();\r\n    const id = await firestoreCon.sendOffer(offer);\r\n\r\n    history.push(`/${id}`);\r\n    const answer = await firestoreCon.getAnswer(id);\r\n    connection.connect(answer);\r\n  };\r\n\r\n  return (\r\n    <label className={css.container}>\r\n      <h1>Add Files</h1>\r\n      <FileInput onFileInput={handleFileInput} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  addConnection: hostSetConnection,\r\n  addFiles: hostAddFiles,\r\n  clearFiles: hostClearFiles,\r\n})(Home);\r\n","import InputToClipboard from './InputToClipboard';\r\n\r\nexport default InputToClipboard;\r\n","import React, { useRef } from 'react';\r\nimport css from './InputToClipboard.module.css';\r\n\r\ninterface IInputToClipboardProps {\r\n  text: string;\r\n}\r\n\r\nconst InputToClipboard: React.FC<IInputToClipboardProps> = ({ text }) => {\r\n  const urlInput = useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    if (!navigator.clipboard) {\r\n      return urlInput.current?.focus();\r\n    }\r\n\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  const handleInputFocus = (evt: React.FocusEvent<HTMLInputElement>) => evt.target.select();\r\n\r\n  return (\r\n    <div className={css.inputGroup}>\r\n      <input\r\n        ref={urlInput}\r\n        className={css.input}\r\n        readOnly\r\n        value={text}\r\n        onFocus={handleInputFocus}\r\n        autoFocus\r\n      />\r\n      <button className={css.btn} onClick={handleClick}>\r\n        <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\">\r\n          <use href=\"icons.svg#copy\" />\r\n        </svg>\r\n        Copy\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputToClipboard;\r\n","import FileCard from './FileCard';\r\n\r\nexport default FileCard;\r\n","import React from 'react';\r\nimport css from './FileCard.module.css';\r\n\r\ninterface IFileCardProps {\r\n  name: string;\r\n  id: string;\r\n  onClick?: (id: string) => void;\r\n  progress?: number;\r\n}\r\n\r\nconst getIcon = (extention: string) => {\r\n  extention = extention.toLowerCase();\r\n  const icons: { [key: string]: string[] } = {\r\n    'file-text': ['txt', 'doc', 'docx', 'rtf', 'odt'],\r\n    'file-picture': ['psd', 'tiff', 'tif', 'bmp', 'jpeg', 'jpg', 'gif', 'png', 'ico', 'webp', 'svg', 'eps', 'ai', 'heic', 'nef', 'crw', 'arw'],\r\n    'file-music': ['ac3', 'aif', 'amr', 'aud', 'mp3', 'flac', 'iff', 'm4a', 'm4b', 'm4p', 'mid', 'mpa', 'ogg', 'wav', 'wave'],\r\n    'file-video': ['mp4', 'avi', 'mpg', 'mov', 'wmv', '3gp', 'flv', 'm4v', 'mts', 'ts', 'webm'],\r\n    'file-zip': ['zip', 'rar', '7z', 'jar', 'gz'],\r\n  };\r\n\r\n  for (const icon in icons) {\r\n    if (icons[icon].includes(extention)) return icon;\r\n  }\r\n\r\n  return 'file-empty';\r\n};\r\n\r\nconst FileCard: React.FC<IFileCardProps> = ({ name, id, onClick, progress }) => {\r\n  const [extention] = name.match(/(?<=\\.)[a-zA-Z0-9]+$/) || [''];\r\n  const icon = getIcon(extention);\r\n\r\n  return (\r\n    <button className={css.card} onClick={() => onClick && onClick(id)}>\r\n      <div className={css.card__icon}>\r\n        <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href={`icons.svg#${icon}`} />\r\n        </svg>\r\n      </div>\r\n      <p className={css.card__title} title={name}>\r\n        {name}\r\n      </p>\r\n      <progress value={progress ?? 0} max={100} className={css.card__progress} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FileCard;\r\n","import FileList from './FileList';\r\n\r\nexport default FileList;\r\n","import React from 'react';\r\nimport css from './FileList.module.css';\r\nimport FileCard from 'Components/FileCard';\r\n\r\ninterface IFileListProps {\r\n  files: {\r\n    id: string;\r\n    name: string;\r\n    progress?: number;\r\n  }[];\r\n  onFileClick?: (id: string) => void;\r\n  appendComponent?: React.ReactNode;\r\n}\r\n\r\nconst FileList: React.FC<IFileListProps> = ({ files, onFileClick, appendComponent }) => {\r\n  return (\r\n    <ul className={css.list}>\r\n      {files.map(({ id, name, progress }) => (\r\n        <li key={id}>\r\n          <FileCard name={name} id={id} onClick={onFileClick} progress={progress} />\r\n        </li>\r\n      ))}\r\n      {appendComponent ? <li>{appendComponent}</li> : null}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default FileList;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React, { ReactNode } from 'react';\r\n\r\nimport css from './Header.module.css';\r\n\r\ninterface IHeaderProps {\r\n  main: ReactNode | string;\r\n  lead: ReactNode | string;\r\n}\r\n\r\nconst Header: React.FC<IHeaderProps> = ({ main, lead }) => (\r\n  <header className={css.header}>\r\n    <h2 className={css.header__heading}>{main}</h2>\r\n    <p className={css.header__lead}>{lead}</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import AddFileCard from './AddFileCard';\r\n\r\nexport default AddFileCard;\r\n","import React from 'react';\r\nimport css from './AddFileCard.module.css';\r\n\r\nconst AddFileCard: React.FC<{ onFileInput: (files: File[]) => void }> = ({ onFileInput }) => (\r\n  <label className={css.addFiles}>\r\n    <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n      <use href=\"icons.svg#file-add\" />\r\n    </svg>\r\n    <span className={css.addFiles__caption}>Add Files</span>\r\n    <input\r\n      type=\"file\"\r\n      className=\"visually-hidden\"\r\n      multiple\r\n      onChange={({ target: { files } }) => files && onFileInput(Array.from(files))}\r\n    />\r\n  </label>\r\n);\r\n\r\nexport default AddFileCard;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import React from 'react';\r\n\r\nimport css from './ShareHost.module.css';\r\nimport InputToClipboard from 'Components/InputToClipboard';\r\nimport FileList from 'Components/FileList';\r\nimport FileInput from 'Components/FileInput';\r\nimport Header from 'Components/Header';\r\nimport AddFileCard from 'Components/AddFileCard';\r\n\r\ninterface IShareHostProps {\r\n  files: { id: string; name: string }[];\r\n  addFiles: (files: File[]) => void;\r\n  removeFile: (id: string) => void;\r\n  connectionStatus: RTCIceConnectionState;\r\n}\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ files, addFiles, removeFile, connectionStatus }) => {\r\n  const mainText = connectionStatus === 'connected' ? 'Client Connected' : 'Share This Link';\r\n  const leadText = connectionStatus === 'connected' ? \"don't close the tab until files are downloaded\" : 'waiting for connection';\r\n  \r\n  return (\r\n    <>\r\n      <Header main={mainText} lead={leadText} />\r\n      <div>\r\n        <div className={css.urlBox}>\r\n          <InputToClipboard text={window.location.href} />\r\n        </div>\r\n        <main className={css.container}>\r\n          <h2 className={css.heading}>Files</h2>\r\n          <FileList\r\n            files={files}\r\n            appendComponent={<AddFileCard onFileInput={addFiles} />}\r\n            onFileClick={removeFile}\r\n          />\r\n        </main>\r\n      </div>\r\n      <FileInput onFileInput={addFiles} noFocus />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareHost;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { hostAddFiles, hostRemoveFile, setConnectionStatus } from 'lib/redux';\r\nimport { formatFileData } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareHost';\r\n\r\ninterface IShareHostProps {\r\n  connection: WebRTCWithFileChannel;\r\n  connectionStatus: RTCIceConnectionState;\r\n  files: IHostFileStorage;\r\n  addFiles: typeof hostAddFiles;\r\n  removeFile: typeof hostRemoveFile;\r\n  setConnectionStatus: typeof setConnectionStatus;\r\n}\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ connection, files, addFiles, removeFile, connectionStatus, setConnectionStatus }) => {\r\n  useEffect(() => {\r\n    connection.onRequestFile = (id) => files[id];\r\n    connection.onConnection = (status) => {\r\n      setConnectionStatus(status);\r\n      if (status !== 'connected') return;\r\n      connection.sendJSON({ action: 'addFiles', files: formatFileData(files) });\r\n    };\r\n  }, [connection, files, setConnectionStatus]);\r\n\r\n  const handleAddFiles = useCallback(\r\n    (files: File[]) => {\r\n      const { payload } = addFiles(files);\r\n      connection.sendJSON({\r\n        action: 'addFiles',\r\n        files: formatFileData(payload),\r\n      });\r\n    },\r\n    [connection, addFiles],\r\n  );\r\n\r\n  const handleRemoveFile = useCallback(\r\n    (id: string) => {\r\n      removeFile(id);\r\n      connection.sendJSON({\r\n        action: 'removeFile',\r\n        id,\r\n      });\r\n    },\r\n    [connection, removeFile],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => ({ id, name: files[id].name }));\r\n\r\n  return <Share addFiles={handleAddFiles} files={filesList} removeFile={handleRemoveFile} connectionStatus={connectionStatus} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({\r\n  files: state.hostFiles,\r\n  connectionStatus: state.connection.status,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addFiles: hostAddFiles, removeFile: hostRemoveFile, setConnectionStatus })(ShareHost);\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React from 'react';\r\n\r\nimport css from './ShareClient.module.css';\r\nimport FileList from 'Components/FileList';\r\nimport Header from 'Components/Header';\r\n\r\ninterface IShareClientProps {\r\n  files: { id: string; name: string; progress?: number }[];\r\n  requestFile: (id: string) => void;\r\n}\r\n\r\nconst ShareClient: React.FC<IShareClientProps> = ({ files, requestFile }) => {\r\n  return (\r\n    <>\r\n      <Header main=\"Download Files\" lead=\"click on file to start download\" />\r\n      <div>\r\n        <main className={css.container}>\r\n          <h2 className={css.heading}>Files</h2>\r\n          <FileList files={files} onFileClick={requestFile} />\r\n        </main>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareClient;\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { clientAddFiles, clientRemoveFile, setDownloadProgress, saveFileData } from 'lib/redux';\r\nimport { tryParseJSON, saveFile } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareClient';\r\n\r\ninterface ISShareClientProps {\r\n  connection: WebRTCWithFileChannel;\r\n  files: IClientFileStorage;\r\n  addFiles: typeof clientAddFiles;\r\n  removeFile: typeof clientRemoveFile;\r\n  setDownloadProgress: typeof setDownloadProgress;\r\n  saveFileData: typeof saveFileData;\r\n}\r\n\r\nconst ShareClient: React.FC<ISShareClientProps> = ({\r\n  connection,\r\n  files,\r\n  addFiles,\r\n  removeFile,\r\n  setDownloadProgress,\r\n  saveFileData,\r\n}) => {\r\n  useEffect(() => {\r\n    connection.onMessage = (msg) => {\r\n      const obj = tryParseJSON(msg);\r\n      if (!obj) return;\r\n      switch (obj.action) {\r\n        case 'addFiles':\r\n          return addFiles(obj.files);\r\n        case 'removeFile':\r\n          return removeFile(obj.id);\r\n      }\r\n    };\r\n    connection.onFileProgress = ({ downloaded, id }) => {\r\n      setDownloadProgress(id, downloaded);\r\n    };\r\n  }, [connection, addFiles, removeFile, setDownloadProgress]);\r\n\r\n  useEffect(() => {\r\n    connection.onFile = (file, info) => {\r\n      saveFileData(info.id, file);\r\n      saveFile(file, info.name);\r\n    };\r\n  }, [connection, saveFileData]);\r\n\r\n  const handleRequestFile = useCallback(\r\n    (id: string) => {\r\n      const file = files[id];\r\n      if (file.file) return saveFile(file.file, file.name);\r\n      if (file.downloadedSize) return;\r\n\r\n      setDownloadProgress(id, 1);\r\n      connection.requestFile(id);\r\n    },\r\n    [connection, files, setDownloadProgress],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => {\r\n    const file = files[id];\r\n    const fileInfo: { id: string; name: string; progress?: number } = { id, name: file.name };\r\n    if (file.downloadedSize) fileInfo.progress = (file.downloadedSize / file.size) * 100;\r\n    return fileInfo;\r\n  });\r\n\r\n  return <Share files={filesList} requestFile={handleRequestFile} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({ files: state.clientFiles });\r\n\r\nexport default connect(mapStateToProps, {\r\n  addFiles: clientAddFiles,\r\n  removeFile: clientRemoveFile,\r\n  setDownloadProgress,\r\n  saveFileData,\r\n})(ShareClient);\r\n","import Share from './Share';\r\n\r\nexport default Share;\r\n","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ShareHost from 'Containers/ShareHost';\r\nimport ShareClient from 'Containers/ShareClient';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { clientSetConnection } from 'lib/redux';\r\n\r\ninterface IShareProps {\r\n  isHost: boolean;\r\n  connection: WebRTCWithFileChannel | undefined;\r\n  clientSetConnection: typeof clientSetConnection;\r\n}\r\n\r\nconst Share: React.FC<IShareProps> = ({ isHost, connection, clientSetConnection }) => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  if (connection) {\r\n    return isHost ? <ShareHost connection={connection} /> : <ShareClient connection={connection} />;\r\n  }\r\n\r\n  if (isHost || !id) {\r\n    history.replace('/');\r\n    return <></>;\r\n  }\r\n\r\n  const newConnection = new WebRTCWithFileChannel();\r\n  const firebaseConnection = new FirestoreConnection();\r\n\r\n  clientSetConnection(newConnection);\r\n\r\n  firebaseConnection\r\n    .getOffer(id)\r\n    .then((offer) => {\r\n      if (!offer) throw new Error(`Can't get offer`);\r\n      return newConnection.connect(offer);\r\n    })\r\n    .then((answer) => firebaseConnection.sendAnswer(id, answer))\r\n    .catch(() => {\r\n      history.replace('/');\r\n    });\r\n\r\n  return <div>Loading...</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    isHost: state.connection.isHost,\r\n    connection: state.connection.connection,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { clientSetConnection })(Share);\r\n","import React from 'react';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\n\r\nimport Home from 'Pages/Home';\r\nimport Share from 'Pages/Share';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route path=\"/:id\">\r\n            <Share />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'lib/redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
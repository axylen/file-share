{"version":3,"sources":["Components/FileCard/FileCard.module.css","Components/ShareClient/ShareClient.module.css","Pages/Home/Home.module.css","Components/ShareHost/ShareHost.module.css","Components/InputToClipboard/InputToClipboard.module.css","Components/Header/Header.module.css","Components/AddFileCard/AddFileCard.module.css","Components/Backdrop/Backdrop.module.css","Components/FileInput/FileInput.module.css","Components/Spinner/Spinner.module.css","Components/FileList/FileList.module.css","lib/helpers/classnames.tsx","lib/helpers/tryParseJSON.ts","lib/helpers/mapObject.ts","lib/helpers/formatFileData.ts","lib/helpers/saveFile.ts","lib/helpers/filterFiles.ts","lib/redux/action/actions.ts","lib/redux/action/types.ts","lib/helpers/generateFileId.ts","lib/redux/reducer/connection.ts","lib/redux/reducer/hostFiles.ts","lib/redux/reducer/clientFiles.ts","lib/redux/reducer/index.ts","lib/redux/store.ts","Components/Backdrop/index.ts","Components/Backdrop/Backdrop.tsx","Components/FileInput/index.tsx","Components/FileInput/FileInput.tsx","lib/webrtc/WebRTCConnection.ts","lib/webrtc/WebRTCFileChannel.ts","lib/webrtc/WebRTCWithFileChannel.ts","lib/firebase/firebase.ts","lib/firebase/FirestoreConnection.ts","Components/Spinner/Spinner.tsx","Pages/Home/index.tsx","Pages/Home/Home.tsx","Components/InputToClipboard/index.ts","Components/InputToClipboard/InputToClipboard.tsx","Components/FileCard/index.ts","Components/FileCard/FileCard.tsx","Components/FileList/index.ts","Components/FileList/FileList.tsx","Components/Header/index.ts","Components/Header/Header.tsx","Components/AddFileCard/index.ts","Components/AddFileCard/AddFileCard.tsx","Components/Spinner/index.ts","Components/ShareHost/ShareHost.tsx","Components/ShareHost/index.ts","Containers/ShareHost/index.ts","Containers/ShareHost/ShareHost.tsx","Components/ShareClient/index.ts","Components/ShareClient/ShareClient.tsx","Containers/ShareClient/index.ts","Containers/ShareClient/ShareClient.tsx","Pages/Share/index.tsx","Pages/Share/Share.tsx","App.tsx","index.tsx"],"names":["module","exports","classnames","classes","Array","isArray","join","Object","keys","filter","cn","tryParseJSON","str","JSON","parse","mapObject","obj","cb","newObj","id","files","name","size","file","link","document","createElement","href","URL","createObjectURL","body","appendChild","download","click","window","revokeObjectURL","remove","type","match","setConnectionStatus","status","payload","hostAddFiles","filesWithId","forEach","lastModified","generateFileId","initState","isHost","combined","combineReducers","connection","state","action","destroy","hostFiles","clientFiles","downloadedSize","store","createStore","rootReducer","Backdrop","children","active","css","backdrop","backdrop_active","className","FileInput","onFileInput","noFocus","useState","isInDragMode","setIsInDragMode","dropzoneRef","useRef","checkFiles","useCallback","filtered","filterFiles","length","handleDrop","evt","preventDefault","dataTransfer","from","handleInput","target","useEffect","handleDragStart","handleDragEnd","current","addEventListener","removeEventListener","ref","input","onDragOver","onDrop","multiple","onChange","tabIndex","RTCPeerConnectionConfig","iceServers","urls","WebRTCConnection","config","messageChannel","onConnection","onMessage","msg","ondatachannel","oniceconnectionstatechange","handleDataChannel","channel","label","createOffer","Promise","resolve","a","onicecandidate","candidate","description","setLocalDescription","setTimeout","iceGatheringState","connect","descr","remote","RTCSessionDescription","setRemoteDescription","createAnswer","sendMessage","message","readyState","send","sendJSON","stringify","RTCPeerConnection","this","createDataChannel","onmessage","data","iceConnectionState","localDescription","WebRTCFileChannel","chunkSize","startTime","onFileReady","info","onFileProgress","onData","onNewFile","onFileDownloaded","push","downloaded","byteLength","performance","now","console","log","speedStats","blob","Blob","undefined","fileSize","time","toFixed","speed","sendingQueue","sendFile","queue","find","_sendFile","chunks","readFileChunks","onChunkLoad","startSendingFile","sendData","onbufferedamountlow","doneSendingFile","shift","splitBuffer","buf","offset","slice","readChunkSize","reader","FileReader","onLoaded","onload","result","onloadend","readAsArrayBuffer","highWaterMark","Math","max","isSending","sendChunk","sendChunks","res","bufferedAmount","next","value","done","sendedBytes","i","chunk","WebRTCWithFileChannel","fileChannel","onFile","onRequestFile","_onMessage","asObj","requestFile","fileDataChannel","sctp","maxMessageSize","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FirestoreConnection","connections","doc","add","getOffer","get","response","answer","Error","offer","sendOffer","then","getAnswer","removeListener","onSnapshot","sendAnswer","set","merge","firestore","collection","Spinner","spinner","Home","addConnection","addFiles","clearFiles","history","useHistory","loading","setLoading","handleFileInput","firestoreCon","container","heading","lead","spinnerContainer","InputToClipboard","text","urlInput","inputGroup","readOnly","onFocus","select","autoFocus","btn","onClick","navigator","clipboard","focus","writeText","icon","xmlns","FileCard","progress","iconOnHover","extention","toLowerCase","icons","includes","getIcon","card","card_iconContainer","card__icon","card__icon_hover","card__title","title","card__progress","FileList","onFileClick","appendComponent","list","map","key","Header","main","header","header__heading","header__lead","AddFileCard","addFiles__caption","SpinnerComp","ShareHost","removeFile","isConnected","connectionStatus","mainText","leadText","connectionBox","location","formatFileData","handleAddFiles","handleRemoveFile","filesList","ShareClient","noFiles","setDownloadProgress","saveFileData","saveFile","handleDragOver","dropEffect","handleRequestFile","fileInfo","Share","clientSetConnection","useParams","to","newConnection","firebaseConnection","catch","replace","App","hashType","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3d72b3d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"FileCard_card__2LQTx\",\"card_iconContainer\":\"FileCard_card_iconContainer__1stON\",\"card__icon\":\"FileCard_card__icon__3au0f\",\"card__icon_hover\":\"FileCard_card__icon_hover__1ZfZb\",\"card__title\":\"FileCard_card__title__3F9SZ\",\"card__progress\":\"FileCard_card__progress__13gjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareClient_heading__VAHtz\",\"connectionBox\":\"ShareClient_connectionBox__1kudq\",\"container\":\"ShareClient_container__22l9m\",\"spinner\":\"ShareClient_spinner__1DKly\",\"connectionStatus\":\"ShareClient_connectionStatus__zdiMK\",\"noFiles\":\"ShareClient_noFiles__1diTg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__q5gBo\",\"heading\":\"Home_heading__3rzF0\",\"lead\":\"Home_lead__27OI1\",\"backdrop\":\"Home_backdrop__1n7Oa\",\"spinnerContainer\":\"Home_spinnerContainer__3Cqik\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"ShareHost_heading__3e1Cg\",\"connectionBox\":\"ShareHost_connectionBox__2Ibxu\",\"container\":\"ShareHost_container__3R05H\",\"spinner\":\"ShareHost_spinner__3zaTs\",\"connectionStatus\":\"ShareHost_connectionStatus__32Sgu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"InputToClipboard_inputGroup__1K_jF\",\"input\":\"InputToClipboard_input__aZxeq\",\"btn\":\"InputToClipboard_btn__13k-2\",\"icon\":\"InputToClipboard_icon__xv5Og\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Q76hA\",\"header__heading\":\"Header_header__heading__BlGzf\",\"header__lead\":\"Header_header__lead__1jR8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addFiles\":\"AddFileCard_addFiles__1Cp53\",\"icon\":\"AddFileCard_icon__2tDcj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Backdrop_backdrop__2USgN\",\"backdrop_active\":\"Backdrop_backdrop_active__Esi8Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FileInput_input__3v6pL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__3GSHq\",\"rotate\":\"Spinner_rotate__2wN5u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FileList_list__3k0mc\"};","interface ClassObject {\r\n  [index: string]: boolean;\r\n}\r\n\r\nconst classnames = (classes: ClassObject | string[]) => {\r\n  if (Array.isArray(classes)) return classes.join(' ');\r\n\r\n  return Object.keys(classes)\r\n    .filter((cn) => classes[cn])\r\n    .join(' ');\r\n};\r\n\r\nexport default classnames;\r\n","const tryParseJSON = (str: string): any | null => {\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default tryParseJSON;\r\n","type Object = { [key: string]: any };\r\n\r\ntype Callback = (value?: any, key?: string, object?: Object) => any;\r\n\r\nconst mapObject = (obj: Object, cb: Callback) => {\r\n  const newObj: any = {};\r\n  for (const id in obj) {\r\n    newObj[id] = cb(obj[id], id, obj);\r\n  }\r\n  return newObj;\r\n};\r\n\r\nexport default mapObject;\r\n","import mapObject from './mapObject';\r\n\r\ntype FileInfo = { name: string; size: number };\r\n\r\nexport default (files: IHostFileStorage): FileInfo => {\r\n  return mapObject(files, ({ name, size }) => ({ name, size }));\r\n};\r\n","export default (file: Blob, name: string) => {\r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(file);\r\n  document.body.appendChild(link);\r\n  link.download = name;\r\n  link.click();\r\n  window.URL.revokeObjectURL(link.href);\r\n  link.remove();\r\n};\r\n","export default (files: File[]) =>\r\n  files.filter(({ size, name, type }) => {\r\n    if (size === 0) return false;\r\n    if (name.match(/lnk$/)) return false;\r\n\r\n    // Some directories in Windows have size = 4096\r\n    if (type === '' && size === 4096) return false;\r\n\r\n    return true;\r\n  });\r\n","import { generateFileId } from 'lib/helpers';\r\n\r\nimport {\r\n  SET_CONNECTION,\r\n  SET_CONNECTION_STATUS,\r\n  HOST_ADD_FILES,\r\n  HOST_REMOVE_FILE,\r\n  HOST_CLEAR_FILES,\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from './types';\r\n\r\nexport const hostSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: true, connection },\r\n});\r\nexport const clientSetConnection = (connection: WebRTCWithFileChannel): IConnectionAction => ({\r\n  type: SET_CONNECTION,\r\n  payload: { isHost: false, connection },\r\n});\r\nexport const setConnectionStatus = (status: RTCIceConnectionState): IConnectionStatusAction => ({\r\n  type: SET_CONNECTION_STATUS,\r\n  payload: { status },\r\n});\r\n\r\nexport const hostAddFiles = (files: File[]): IHostAddFilesAction => {\r\n  const filesWithId: { [key: string]: File } = {};\r\n  files.forEach((file) => (filesWithId[generateFileId(file)] = file));\r\n\r\n  return { type: HOST_ADD_FILES, payload: filesWithId };\r\n};\r\nexport const clientAddFiles = (files: IClientFileStorage): IClientAddFilesAction => ({\r\n  type: CLIENT_ADD_FILES,\r\n  payload: files,\r\n});\r\n\r\nexport const hostRemoveFile = (id: string): IHostRemoveFileAction => ({\r\n  type: HOST_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\nexport const clientRemoveFile = (id: string): IClientRemoveFileAction => ({\r\n  type: CLIENT_REMOVE_FILE,\r\n  payload: { id },\r\n});\r\n\r\nexport const hostClearFiles = (): IHostClearFilesAction => {\r\n  return { type: HOST_CLEAR_FILES };\r\n};\r\n\r\nexport const setDownloadProgress = (id: string, size: number): IClientDownloadProgressAction => ({\r\n  type: SET_DOWNLOAD_PROGRESS,\r\n  payload: { id, downloadedSize: size },\r\n});\r\nexport const saveFileData = (id: string, file: Blob): IClientSaveFileDataAction => ({\r\n  type: SAVE_FILE_DATA,\r\n  payload: { id, file },\r\n});\r\n","export const HOST_ADD_FILES = 'HOST_ADD_FILES';\r\nexport const HOST_REMOVE_FILE = 'HOST_REMOVE_FILE';\r\nexport const HOST_CLEAR_FILES = 'HOST_CLEAR_FILES';\r\n\r\nexport const CLIENT_ADD_FILES = 'CLIENT_ADD_FILES';\r\nexport const CLIENT_REMOVE_FILE = 'CLIENT_REMOVE_FILE';\r\n\r\nexport const SET_CONNECTION = 'SET_CONNECTION';\r\nexport const SET_CONNECTION_STATUS = 'SET_CONNECTION_STATUS';\r\n\r\nexport const SET_DOWNLOAD_PROGRESS = 'SET_DOWNLOAD_PROGRESS';\r\nexport const SAVE_FILE_DATA = 'SAVE_FILE_DATA';\r\n","export default (file: File) => `${file.lastModified}${file.size}${file.name}`;\r\n","import { SET_CONNECTION, SET_CONNECTION_STATUS } from '../action';\r\n\r\ninterface IConnectionInfo {\r\n  isHost: boolean;\r\n  connection?: WebRTCWithFileChannel;\r\n  status: RTCIceConnectionState;\r\n}\r\n\r\ndeclare global {\r\n  interface IConnectionAction {\r\n    type: typeof SET_CONNECTION;\r\n    payload: {\r\n      isHost: boolean;\r\n      connection: WebRTCWithFileChannel;\r\n    };\r\n  }\r\n  interface IConnectionStatusAction {\r\n    type: typeof SET_CONNECTION_STATUS;\r\n    payload: { status: RTCIceConnectionState };\r\n  }\r\n}\r\n\r\nconst initState: IConnectionInfo = {\r\n  isHost: false,\r\n  status: 'new',\r\n};\r\n\r\ntype Action = IConnectionAction | IConnectionStatusAction;\r\n\r\nexport default (state: IConnectionInfo = initState, action: Action): IConnectionInfo => {\r\n  switch (action.type) {\r\n    case SET_CONNECTION:\r\n      if (state.connection) state.connection.destroy();\r\n      return { ...state, ...action.payload, status: 'new' };\r\n    case SET_CONNECTION_STATUS:\r\n      return { ...state, ...action.payload };\r\n  }\r\n  return state;\r\n};\r\n","import { HOST_ADD_FILES, HOST_REMOVE_FILE, HOST_CLEAR_FILES } from '../action';\r\n\r\ndeclare global {\r\n  interface IHostFileStorage {\r\n    [key: string]: File;\r\n  }\r\n  interface IHostAddFilesAction {\r\n    type: typeof HOST_ADD_FILES;\r\n    payload: IHostFileStorage;\r\n  }\r\n  interface IHostRemoveFileAction {\r\n    type: typeof HOST_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n  interface IHostClearFilesAction {\r\n    type: typeof HOST_CLEAR_FILES;\r\n  }\r\n}\r\ntype Action = IHostAddFilesAction | IHostRemoveFileAction | IHostClearFilesAction;\r\n\r\nconst initState: IHostFileStorage = {};\r\n\r\nexport default (state: IHostFileStorage = initState, action: Action): IHostFileStorage => {\r\n  switch (action.type) {\r\n    case HOST_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case HOST_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n    case HOST_CLEAR_FILES:\r\n      return {};\r\n  }\r\n  return state;\r\n};\r\n","import {\r\n  CLIENT_ADD_FILES,\r\n  CLIENT_REMOVE_FILE,\r\n  SET_DOWNLOAD_PROGRESS,\r\n  SAVE_FILE_DATA,\r\n} from '../action';\r\n\r\ndeclare global {\r\n  interface IClientFileStorage {\r\n    [key: string]: {\r\n      name: string;\r\n      size: number;\r\n      downloadedSize?: number;\r\n      file?: Blob;\r\n    };\r\n  }\r\n  interface IClientAddFilesAction {\r\n    type: typeof CLIENT_ADD_FILES;\r\n    payload: IClientFileStorage;\r\n  }\r\n  interface IClientRemoveFileAction {\r\n    type: typeof CLIENT_REMOVE_FILE;\r\n    payload: { id: string };\r\n  }\r\n  interface IClientDownloadProgressAction {\r\n    type: typeof SET_DOWNLOAD_PROGRESS;\r\n    payload: { id: string; downloadedSize: number };\r\n  }\r\n  interface IClientSaveFileDataAction {\r\n    type: typeof SAVE_FILE_DATA;\r\n    payload: { id: string; file: Blob };\r\n  }\r\n}\r\n\r\ntype Action =\r\n  | IClientAddFilesAction\r\n  | IClientRemoveFileAction\r\n  | IClientDownloadProgressAction\r\n  | IClientSaveFileDataAction;\r\n\r\nconst initState: IClientFileStorage = {};\r\n\r\nexport default (state: IClientFileStorage = initState, action: Action): IClientFileStorage => {\r\n  switch (action.type) {\r\n    case CLIENT_ADD_FILES:\r\n      return { ...state, ...action.payload };\r\n    case CLIENT_REMOVE_FILE:\r\n      const { [action.payload.id]: deleted, ...files } = state;\r\n      return files;\r\n    case SET_DOWNLOAD_PROGRESS: {\r\n      const files = { ...state };\r\n      files[action.payload.id].downloadedSize = action.payload.downloadedSize;\r\n      return files;\r\n    }\r\n    case SAVE_FILE_DATA: {\r\n      const files = { ...state };\r\n      files[action.payload.id].file = action.payload.file;\r\n      return files;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport connection from './connection';\r\nimport hostFiles from './hostFiles';\r\nimport clientFiles from './clientFiles';\r\n\r\nconst combined = combineReducers({ connection, hostFiles, clientFiles });\r\n\r\ndeclare global {\r\n  type ReduxStore = ReturnType<typeof combined>;\r\n}\r\n\r\nexport default combined;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import Backdrop from './Backdrop';\r\n\r\nexport default Backdrop;\r\n","import React from 'react';\r\nimport css from './Backdrop.module.css';\r\nimport { classnames } from 'lib/helpers';\r\n\r\nconst Backdrop: React.FC<{ active?: boolean }> = ({ children, active = true }) => {\r\n  const classes = {\r\n    [css.backdrop]: true,\r\n    [css.backdrop_active]: active,\r\n  };\r\n\r\n  return <div className={classnames(classes)}>{children}</div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import FileInput from './FileInput';\r\n\r\nexport default FileInput;\r\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport css from './FileInput.module.css';\r\n\r\nimport Backdrop from 'Components/Backdrop';\r\nimport { filterFiles } from 'lib/helpers';\r\n\r\ninterface IFileInputProps {\r\n  onFileInput: (files: File[]) => void;\r\n  noFocus?: boolean;\r\n}\r\n\r\ntype InputFileChangeEvent = React.ChangeEvent<HTMLInputElement>;\r\n\r\nconst FileInput: React.FC<IFileInputProps> = ({ onFileInput, noFocus }) => {\r\n  const [isInDragMode, setIsInDragMode] = useState(false);\r\n  const dropzoneRef = useRef<HTMLDivElement>(null);\r\n\r\n  const checkFiles = useCallback(\r\n    (files: File[]) => {\r\n      const filtered = filterFiles(files);\r\n      if (filtered.length) onFileInput(filtered);\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    (evt: React.DragEvent) => {\r\n      evt.preventDefault();\r\n      setIsInDragMode(false);\r\n\r\n      const files = evt.dataTransfer.files;\r\n      if (files) checkFiles(Array.from(files));\r\n    },\r\n    [checkFiles],\r\n  );\r\n\r\n  const handleInput = useCallback(\r\n    (evt: InputFileChangeEvent) => {\r\n      const files = evt.target.files;\r\n      if (files) checkFiles(Array.from(files));\r\n    },\r\n    [checkFiles],\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleDragStart = () => setIsInDragMode(true);\r\n    const handleDragEnd = (evt: DragEvent) => {\r\n      if (evt.target === dropzoneRef.current) setIsInDragMode(false);\r\n    };\r\n\r\n    window.addEventListener('dragenter', handleDragStart);\r\n    window.addEventListener('dragleave', handleDragEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('dragenter', handleDragStart);\r\n      window.removeEventListener('dragleave', handleDragEnd);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Backdrop active={isInDragMode}>\r\n      <div ref={dropzoneRef} className={css.input} onDragOver={(evt) => evt.preventDefault()} onDrop={handleDrop}>\r\n        <input type=\"file\" name=\"files\" className=\"visually-hidden\" multiple onChange={handleInput} tabIndex={noFocus ? -1 : 0} />\r\n      </div>\r\n    </Backdrop>\r\n  );\r\n};\r\n\r\nexport default FileInput;\r\n","const RTCPeerConnectionConfig: RTCConfiguration = {\r\n  iceServers: [\r\n    { urls: ['stun:stun.l.google.com:19302'] },\r\n    { urls: ['stun:stun1.l.google.com:19302'] },\r\n    { urls: ['stun:stun2.l.google.com:19302'] },\r\n    { urls: ['stun:stun3.l.google.com:19302'] },\r\n    { urls: ['stun:stun4.l.google.com:19302'] },\r\n    { urls: ['stun:stun.voipstunt.com'] },\r\n  ],\r\n};\r\n\r\nclass WebRTCConnection {\r\n  connection: RTCPeerConnection;\r\n  messageChannel: RTCDataChannel;\r\n  onConnection = (status: RTCIceConnectionState) => {};\r\n  onMessage = (msg: string) => {};\r\n\r\n  constructor(config: RTCConfiguration = RTCPeerConnectionConfig) {\r\n    const connection = new RTCPeerConnection(config);\r\n    this.connection = connection;\r\n\r\n    const messageChannel = connection.createDataChannel('message');\r\n\r\n    this.messageChannel = messageChannel;\r\n\r\n    messageChannel.onmessage = (evt) => this.onMessage(evt.data);\r\n\r\n    connection.ondatachannel = (evt) => this.handleDataChannel(evt);\r\n    connection.oniceconnectionstatechange = () => this.onConnection(connection.iceConnectionState);\r\n  }\r\n\r\n  get description() {\r\n    return JSON.stringify(this.connection.localDescription);\r\n  }\r\n\r\n  destroy = () => {\r\n    this.connection.ondatachannel = null;\r\n    this.connection.oniceconnectionstatechange = null;\r\n  };\r\n\r\n  handleDataChannel = ({ channel }: RTCDataChannelEvent) => {\r\n    if (channel.label === 'message') this.messageChannel = channel;\r\n  };\r\n\r\n  createOffer = () => {\r\n    const { connection } = this;\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n\r\n      await connection.setLocalDescription(await connection.createOffer());\r\n\r\n      setTimeout(() => {\r\n        connection.iceGatheringState !== 'complete' && resolve(this.description);\r\n      }, 2000);\r\n    });\r\n  };\r\n\r\n  connect = (descr: string) => {\r\n    const { connection } = this;\r\n    const remote = new RTCSessionDescription(JSON.parse(descr));\r\n\r\n    return new Promise<string>(async (resolve) => {\r\n      await connection.setRemoteDescription(remote);\r\n\r\n      if (remote.type !== 'offer') return resolve();\r\n\r\n      connection.onicecandidate = ({ candidate }) => !candidate && resolve(this.description);\r\n      await connection.setLocalDescription(await connection.createAnswer());\r\n    });\r\n  };\r\n\r\n  sendMessage = (msg: string): void => {\r\n    const message = this.messageChannel;\r\n\r\n    if (message.readyState === 'open') return message.send(msg);\r\n    setTimeout(() => this.sendMessage(msg), 50);\r\n  };\r\n\r\n  sendJSON = (obj: object): void => {\r\n    this.sendMessage(JSON.stringify(obj));\r\n  };\r\n}\r\n\r\nexport default WebRTCConnection;\r\n","export type FileInfo = {\r\n  id: string;\r\n  name: string;\r\n  size: number;\r\n};\r\n\r\ninterface IFileTransferInfo {\r\n  status: 'done' | 'new';\r\n  info?: FileInfo;\r\n}\r\n\r\ntype readFileChunksCallbacks = {\r\n  onChunkLoad?: (chunk: ArrayBuffer) => void;\r\n  onLoaded?: (chunks: ArrayBuffer[]) => void;\r\n};\r\n\r\nclass WebRTCFileChannel {\r\n  channel: RTCDataChannel;\r\n  chunkSize: number;\r\n\r\n  file?: {\r\n    data: ArrayBuffer[];\r\n    info: FileInfo;\r\n    downloaded: number;\r\n  };\r\n\r\n  startTime = 0;\r\n\r\n  onFileReady = (file: Blob, info: FileInfo): void => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n\r\n  constructor(channel: RTCDataChannel, chunkSize = 16 * 1024) {\r\n    this.channel = channel;\r\n    this.chunkSize = chunkSize;\r\n  }\r\n\r\n  onMessage = (data: ArrayBuffer | string) => {\r\n    if (typeof data !== 'string') return this.onData(data);\r\n\r\n    const { status, info }: IFileTransferInfo = JSON.parse(data);\r\n    const file = this.file;\r\n\r\n    if (status === 'new' && info) this.onNewFile(info);\r\n    else if (status === 'done' && file) this.onFileDownloaded(file.data, file.info);\r\n  };\r\n\r\n  private onData = (data: ArrayBuffer) => {\r\n    const file = this.file;\r\n    if (!file) return;\r\n\r\n    file.data.push(data);\r\n\r\n    const { id, size } = file.info;\r\n    const downloaded = (file.downloaded += data.byteLength);\r\n\r\n    this.onFileProgress({ size, id, downloaded });\r\n  };\r\n\r\n  private onNewFile = (info: FileInfo) => {\r\n    this.startTime = performance.now();\r\n    this.file = { data: [], downloaded: 0, info };\r\n  };\r\n\r\n  private onFileDownloaded = (data: ArrayBuffer[], info: FileInfo) => {\r\n    console.log(this.speedStats(info.size));\r\n\r\n    const blob = new Blob(data);\r\n    this.onFileReady(blob, info);\r\n    this.file = undefined;\r\n  };\r\n\r\n  private speedStats = (fileSize: number) => {\r\n    const time = (performance.now() - this.startTime) / 1000;\r\n    const size = fileSize / 1024 / 1024;\r\n    return {\r\n      time: `${time.toFixed(2)} сек.`,\r\n      size: `${size.toFixed(2)} мб`,\r\n      speed: `${(size / time).toFixed(2)} мб/сек`,\r\n    };\r\n  };\r\n\r\n  sendingQueue: { id: string; file: File }[] = [];\r\n\r\n  sendFile = (file: File, id: string) => {\r\n    const queue = this.sendingQueue;\r\n    const hasIdInQueue = !!queue.find((file) => file.id === id);\r\n\r\n    if (hasIdInQueue) return;\r\n\r\n    queue.push({ file, id });\r\n\r\n    if (queue.length === 1) this._sendFile();\r\n  };\r\n\r\n  private _sendFile = () => {\r\n    if (!this.sendingQueue.length) return;\r\n    const { file, id } = this.sendingQueue[0];\r\n\r\n    const chunks = this.readFileChunks(file, {\r\n      onChunkLoad: () => send(),\r\n    });\r\n    this.startSendingFile(id, file.name, file.size);\r\n\r\n    const send = this.sendData(chunks, file.size);\r\n\r\n    this.channel.onbufferedamountlow = send;\r\n  };\r\n\r\n  private startSendingFile = (id: string, name: string, size: number) => {\r\n    this.startTime = performance.now();\r\n\r\n    const info = {\r\n      status: 'new',\r\n      info: { id, name, size },\r\n    };\r\n\r\n    this.channel.send(JSON.stringify(info));\r\n  };\r\n\r\n  private doneSendingFile = () => {\r\n    this.channel.onbufferedamountlow = null;\r\n    this.channel.send(JSON.stringify({ status: 'done' }));\r\n    const file = this.sendingQueue.shift();\r\n\r\n    console.log(this.speedStats(file?.file.size || 1));\r\n\r\n    this._sendFile();\r\n  };\r\n\r\n  splitBuffer = (buf: ArrayBuffer, chunkSize: number) => {\r\n    let offset = 0;\r\n\r\n    const chunks = [];\r\n\r\n    while (offset < buf.byteLength) {\r\n      chunks.push(buf.slice(offset, offset + chunkSize));\r\n      offset += chunkSize;\r\n    }\r\n\r\n    return chunks;\r\n  };\r\n\r\n  readFileChunks = (file: File, cb: readFileChunksCallbacks = {}) => {\r\n    const readChunkSize = 1024 * 1024 * 2;\r\n    const chunks: ArrayBuffer[] = [];\r\n\r\n    let offset = 0;\r\n    const reader = new FileReader();\r\n\r\n    const { onChunkLoad = () => {}, onLoaded = () => {} } = cb;\r\n\r\n    reader.onload = () => {\r\n      if (!reader.result || typeof reader.result === 'string') return;\r\n      chunks.push(...this.splitBuffer(reader.result, this.chunkSize));\r\n      offset += readChunkSize;\r\n      onChunkLoad(reader.result);\r\n    };\r\n\r\n    reader.onloadend = () => {\r\n      if (offset < file.size) {\r\n        reader.readAsArrayBuffer(file.slice(offset, offset + readChunkSize));\r\n      } else {\r\n        onLoaded(chunks);\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file.slice(0, readChunkSize));\r\n\r\n    return chunks;\r\n  };\r\n\r\n  private sendData = (chunks: ArrayBuffer[], size: number) => {\r\n    const highWaterMark = Math.max(this.chunkSize * 8, 1048576);\r\n\r\n    let isSending = false;\r\n    const sendChunk = this.sendChunks(chunks, size);\r\n\r\n    const send = () => {\r\n      if (isSending) return;\r\n      if (!chunks.length) return;\r\n\r\n      isSending = true;\r\n\r\n      let bufferedAmount = this.channel.bufferedAmount;\r\n\r\n      let res: IteratorResult<number, void>;\r\n\r\n      do {\r\n        res = sendChunk.next();\r\n        bufferedAmount += res.value || 0;\r\n\r\n        if (!res.done && res.value === 0) {\r\n          isSending = false;\r\n          return;\r\n        }\r\n\r\n        if (bufferedAmount >= highWaterMark) {\r\n          if (this.channel.bufferedAmount < this.chunkSize) {\r\n            setTimeout(send, 0);\r\n          }\r\n\r\n          isSending = false;\r\n          return;\r\n        }\r\n      } while (!res.done);\r\n\r\n      this.doneSendingFile();\r\n    };\r\n\r\n    return send;\r\n  };\r\n\r\n  private *sendChunks(chunks: ArrayBuffer[], fileSize: number) {\r\n    let sendedBytes = 0;\r\n    let i = 0;\r\n    while (sendedBytes < fileSize) {\r\n      const chunk = chunks[i];\r\n      if (chunk) {\r\n        i++;\r\n        this.channel.send(chunk);\r\n        sendedBytes += chunk.byteLength;\r\n        yield chunk.byteLength;\r\n      } else {\r\n        yield 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default WebRTCFileChannel;\r\n","import WebRTCConnection from './WebRTCConnection';\r\nimport WebRTCFileChannel, { FileInfo } from './WebRTCFileChannel';\r\n\r\nimport { tryParseJSON } from 'lib/helpers';\r\n\r\nclass WebRTCWithFileChannel extends WebRTCConnection {\r\n  fileChannel: WebRTCFileChannel;\r\n\r\n  onFile = (file: Blob, info: FileInfo) => {};\r\n  onFileProgress = (info: { size: number; downloaded: number; id: string }): void => {};\r\n  onRequestFile = (id: string): File | void => {};\r\n\r\n  constructor(config?: RTCConfiguration) {\r\n    super(config);\r\n\r\n    const fileDataChannel = this.connection.createDataChannel('file');\r\n    const fileChannel = new WebRTCFileChannel(fileDataChannel, this.connection.sctp?.maxMessageSize);\r\n    this.fileChannel = fileChannel;\r\n\r\n    fileChannel.onFileReady = (file, info) => this.onFile(file, info);\r\n    fileChannel.onFileProgress = (info) => this.onFileProgress(info);\r\n    \r\n    fileDataChannel.onmessage = ({ data }) => fileChannel.onMessage(data);\r\n    this.messageChannel.onmessage = this._onMessage;\r\n  }\r\n\r\n  handleDataChannel = ({ channel }: RTCDataChannelEvent) => {\r\n    if (channel.label === 'message') this.messageChannel = channel;\r\n    if (channel.label === 'file') this.fileChannel.channel = channel;\r\n  };\r\n\r\n  private _onMessage = (evt: MessageEvent) => {\r\n    const asObj = tryParseJSON(evt.data);\r\n\r\n    if (asObj && asObj.action === 'sendFile') {\r\n      const file = this.onRequestFile(asObj.id);\r\n      if (file) this.sendFile(file, asObj.id);\r\n      return;\r\n    }\r\n\r\n    this.onMessage(evt.data);\r\n  };\r\n\r\n  sendFile = (file: File, id: string) => this.fileChannel.sendFile(file, id);\r\n\r\n  requestFile = (id: string) => {\r\n    this.sendJSON({ action: 'sendFile', id });\r\n  };\r\n}\r\n\r\nexport default WebRTCWithFileChannel;\r\n","import * as firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import firebase from './firebase';\r\n\r\ntype FirestoreConnections = firebase.firestore.CollectionReference<firebase.firestore.DocumentData>;\r\n\r\nclass FirestoreConnection {\r\n  private connections: FirestoreConnections;\r\n\r\n  constructor() {\r\n    this.connections = firebase.firestore().collection('connections');\r\n  }\r\n\r\n  private doc = (id: string) => this.connections.doc(id);\r\n  private add = (data: firebase.firestore.DocumentData) => this.connections.add(data);\r\n\r\n  getOffer = async (id: string): Promise<string | void> => {\r\n    const response = await this.doc(id).get();\r\n    const data = response.data();\r\n    if (data) {\r\n      if (data.answer) throw new Error('Was already connected');\r\n      return data.offer;\r\n    }\r\n  };\r\n\r\n  sendOffer = (offer: string) => this.add({ offer }).then(({ id }) => id);\r\n\r\n  getAnswer = (id: string) =>\r\n    new Promise<string>((resolve) => {\r\n      const removeListener = this.doc(id).onSnapshot((response) => {\r\n        const data = response.data();\r\n        if (!data || !data.answer) return;\r\n\r\n        resolve(data.answer);\r\n        removeListener();\r\n      });\r\n    });\r\n\r\n  sendAnswer = (id: string, answer: string) => this.doc(id).set({ answer }, { merge: true });\r\n}\r\n\r\nexport default FirestoreConnection;\r\n","import React from 'react';\r\nimport css from './Spinner.module.css';\r\n\r\nconst Spinner: React.FC = () => <span className={css.spinner} />;\r\n\r\nexport default Spinner;\r\n","import Home from './Home';\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport css from './Home.module.css';\r\n\r\nimport FileInput from 'Components/FileInput';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { hostAddFiles, hostSetConnection, hostClearFiles } from 'lib/redux';\r\nimport Spinner from 'Components/Spinner/Spinner';\r\nimport Backdrop from 'Components/Backdrop';\r\n\r\ninterface IHomeProps {\r\n  addConnection: typeof hostSetConnection;\r\n  addFiles: typeof hostAddFiles;\r\n  clearFiles: typeof hostClearFiles;\r\n}\r\n\r\nconst Home: React.FC<IHomeProps> = ({ addConnection, addFiles, clearFiles }) => {\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleFileInput = async (files: File[]) => {\r\n    const connection = new WebRTCWithFileChannel();\r\n    addConnection(connection);\r\n    clearFiles();\r\n    addFiles(files);\r\n\r\n    const firestoreCon = new FirestoreConnection();\r\n\r\n    setLoading(true);\r\n\r\n    const offer = await connection.createOffer();\r\n    const id = await firestoreCon.sendOffer(offer);\r\n\r\n    history.push(`/${id}`);\r\n    const answer = await firestoreCon.getAnswer(id);\r\n    connection.connect(answer);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={css.container}>\r\n        <h1 className={css.heading}>Share files easily</h1>\r\n        <p className={css.lead}>Drop files here or click to select</p>\r\n        <FileInput onFileInput={handleFileInput} />\r\n      </label>\r\n      <Backdrop active={loading}>\r\n        <div className={css.backdrop}>\r\n          <div className={css.spinnerContainer}>\r\n            <Spinner />\r\n          </div>\r\n        </div>\r\n      </Backdrop>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(null, {\r\n  addConnection: hostSetConnection,\r\n  addFiles: hostAddFiles,\r\n  clearFiles: hostClearFiles,\r\n})(Home);\r\n","import InputToClipboard from './InputToClipboard';\r\n\r\nexport default InputToClipboard;\r\n","import React, { useRef } from 'react';\r\nimport css from './InputToClipboard.module.css';\r\n\r\ninterface IInputToClipboardProps {\r\n  text: string;\r\n}\r\n\r\nconst InputToClipboard: React.FC<IInputToClipboardProps> = ({ text }) => {\r\n  const urlInput = useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    if (!navigator.clipboard) {\r\n      return urlInput.current?.focus();\r\n    }\r\n\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  return (\r\n    <div className={css.inputGroup}>\r\n      <input ref={urlInput} className={css.input} readOnly value={text} onFocus={(evt) => evt.target.select()} autoFocus />\r\n      <button className={css.btn} onClick={handleClick}>\r\n        <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href=\"icons.svg#copy\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputToClipboard;\r\n","import FileCard from './FileCard';\r\n\r\nexport default FileCard;\r\n","import React from 'react';\r\nimport css from './FileCard.module.css';\r\n\r\ninterface IFileCardProps {\r\n  name: string;\r\n  id: string;\r\n  onClick?: (id: string) => void;\r\n  progress?: number;\r\n  iconOnHover: string;\r\n}\r\n\r\nconst getIcon = (extention: string) => {\r\n  extention = extention.toLowerCase();\r\n  const icons: { [key: string]: string[] } = {\r\n    'file-text': ['txt', 'doc', 'docx', 'rtf', 'odt'],\r\n    'file-image': ['psd', 'tiff', 'tif', 'bmp', 'jpeg', 'jpg', 'gif', 'png', 'ico', 'webp', 'svg', 'eps', 'ai', 'heic', 'nef', 'crw', 'arw'],\r\n    'file-audio': ['ac3', 'aif', 'amr', 'aud', 'mp3', 'flac', 'iff', 'm4a', 'm4b', 'm4p', 'mid', 'mpa', 'ogg', 'wav', 'wave'],\r\n    'file-video': ['mp4', 'avi', 'mpg', 'mov', 'wmv', '3gp', 'flv', 'm4v', 'mts', 'ts', 'webm'],\r\n    'file-zip': ['zip', 'rar', '7z', 'jar', 'gz'],\r\n  };\r\n\r\n  for (const icon in icons) {\r\n    if (icons[icon].includes(extention)) return icon;\r\n  }\r\n\r\n  return 'file-empty';\r\n};\r\n\r\nconst FileCard: React.FC<IFileCardProps> = ({ name, id, onClick, progress, iconOnHover }) => {\r\n  const res = name.match(/\\.([a-zA-Z0-9])+$/);\r\n  const extention = res ? res[1] : '';\r\n  const icon = getIcon(extention);\r\n\r\n  return (\r\n    <button className={css.card} onClick={() => onClick && onClick(id)}>\r\n      <div className={css.card_iconContainer}>\r\n        <svg className={css.card__icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href={`icons.svg#${icon}`} />\r\n        </svg>\r\n        <svg className={css.card__icon_hover} xmlns=\"http://www.w3.org/2000/svg\">\r\n          <use href={`icons.svg#${iconOnHover}`} />\r\n        </svg>\r\n      </div>\r\n      <p className={css.card__title} title={name}>\r\n        {name}\r\n      </p>\r\n      <progress value={progress ?? 0} max={100} className={css.card__progress} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FileCard;\r\n","import FileList from './FileList';\r\n\r\nexport default FileList;\r\n","import React from 'react';\r\nimport css from './FileList.module.css';\r\nimport FileCard from 'Components/FileCard';\r\n\r\ninterface IFileListProps {\r\n  files: {\r\n    id: string;\r\n    name: string;\r\n    progress?: number;\r\n  }[];\r\n  onFileClick?: (id: string) => void;\r\n  appendComponent?: React.ReactNode;\r\n  iconOnHover: string;\r\n}\r\n\r\nconst FileList: React.FC<IFileListProps> = ({ files, onFileClick, appendComponent, iconOnHover }) => (\r\n  <ul className={css.list}>\r\n    {files.map((file) => (\r\n      <li key={file.id}>\r\n        <FileCard {...file} onClick={onFileClick} iconOnHover={iconOnHover} />\r\n      </li>\r\n    ))}\r\n    {appendComponent ? <li>{appendComponent}</li> : null}\r\n  </ul>\r\n);\r\n\r\nexport default FileList;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React, { ReactNode } from 'react';\r\n\r\nimport css from './Header.module.css';\r\n\r\ninterface IHeaderProps {\r\n  main: ReactNode | string;\r\n  lead: ReactNode | string;\r\n}\r\n\r\nconst Header: React.FC<IHeaderProps> = ({ main, lead }) => (\r\n  <header className={css.header}>\r\n    <h2 className={css.header__heading}>{main}</h2>\r\n    <p className={css.header__lead}>{lead}</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import AddFileCard from './AddFileCard';\r\n\r\nexport default AddFileCard;\r\n","import React, { useCallback } from 'react';\r\nimport css from './AddFileCard.module.css';\r\nimport { filterFiles } from 'lib/helpers';\r\n\r\ntype ChangeEvent = React.ChangeEvent<HTMLInputElement>;\r\n\r\nconst AddFileCard: React.FC<{ onFileInput: (files: File[]) => void }> = ({ onFileInput }) => {\r\n  const handleFileInput = useCallback(\r\n    (evt: ChangeEvent) => {\r\n      const files = filterFiles(Array.from(evt.target.files || []));\r\n      if (files.length) onFileInput(files);\r\n    },\r\n    [onFileInput],\r\n  );\r\n\r\n  return (\r\n    <label className={css.addFiles}>\r\n      <svg className={css.icon} xmlns=\"http://www.w3.org/2000/svg\">\r\n        <use href=\"icons.svg#file-add\" />\r\n      </svg>\r\n      <span className={css.addFiles__caption}>Add Files</span>\r\n      <input type=\"file\" className=\"visually-hidden\" multiple onChange={handleFileInput} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default AddFileCard;\r\n","import Spinner from './Spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\n\r\nimport css from './ShareHost.module.css';\r\nimport InputToClipboard from 'Components/InputToClipboard';\r\nimport FileList from 'Components/FileList';\r\nimport FileInput from 'Components/FileInput';\r\nimport Header from 'Components/Header';\r\nimport AddFileCard from 'Components/AddFileCard';\r\nimport Spinner from 'Components/Spinner';\r\n\r\ninterface IShareHostProps {\r\n  files: { id: string; name: string }[];\r\n  addFiles: (files: File[]) => void;\r\n  removeFile: (id: string) => void;\r\n  connectionStatus: RTCIceConnectionState;\r\n}\r\n\r\nconst SpinnerComp = (\r\n  <>\r\n    waiting for connection\r\n    <span className={css.spinner}>\r\n      <Spinner />\r\n    </span>\r\n  </>\r\n);\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ files, addFiles, removeFile, connectionStatus }) => {\r\n  const isConnected = connectionStatus === 'connected';\r\n  const mainText = isConnected ? 'Files can be downloaded now' : 'Share this link';\r\n  const leadText = isConnected ? \"don't close the tab until files are downloaded\" : SpinnerComp;\r\n\r\n  return (\r\n    <>\r\n      <Header main={mainText} lead={leadText} />\r\n      <div className={css.connectionBox}>\r\n        {isConnected ? <div className={css.connectionStatus}>Connected</div> : <InputToClipboard text={window.location.href} />}\r\n      </div>\r\n      <main className={css.container}>\r\n        <h2 className={css.heading}>Files</h2>\r\n        <FileList files={files} appendComponent={<AddFileCard onFileInput={addFiles} />} onFileClick={removeFile} iconOnHover=\"file-delete\" />\r\n      </main>\r\n      <FileInput onFileInput={addFiles} noFocus />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareHost;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import ShareHost from './ShareHost';\r\n\r\nexport default ShareHost;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { hostAddFiles, hostRemoveFile, setConnectionStatus } from 'lib/redux';\r\nimport { formatFileData } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareHost';\r\n\r\ninterface IShareHostProps {\r\n  connection: WebRTCWithFileChannel;\r\n  connectionStatus: RTCIceConnectionState;\r\n  files: IHostFileStorage;\r\n  addFiles: typeof hostAddFiles;\r\n  removeFile: typeof hostRemoveFile;\r\n  setConnectionStatus: typeof setConnectionStatus;\r\n}\r\n\r\nconst ShareHost: React.FC<IShareHostProps> = ({ connection, files, addFiles, removeFile, connectionStatus, setConnectionStatus }) => {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    connection.onRequestFile = (id) => files[id];\r\n    connection.onConnection = (status) => {\r\n      setConnectionStatus(status);\r\n      if (status === 'disconnected') return history.push('/');\r\n      if (status !== 'connected') return;\r\n      connection.sendJSON({ action: 'addFiles', files: formatFileData(files) });\r\n    };\r\n  }, [connection, files, setConnectionStatus, history]);\r\n\r\n  const handleAddFiles = useCallback(\r\n    (files: File[]) => {\r\n      const { payload } = addFiles(files);\r\n      connection.sendJSON({ action: 'addFiles', files: formatFileData(payload) });\r\n    },\r\n    [connection, addFiles],\r\n  );\r\n\r\n  const handleRemoveFile = useCallback(\r\n    (id: string) => {\r\n      removeFile(id);\r\n      connection.sendJSON({ action: 'removeFile', id });\r\n    },\r\n    [connection, removeFile],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => ({ id, name: files[id].name }));\r\n\r\n  return <Share addFiles={handleAddFiles} files={filesList} removeFile={handleRemoveFile} connectionStatus={connectionStatus} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({\r\n  files: state.hostFiles,\r\n  connectionStatus: state.connection.status,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addFiles: hostAddFiles, removeFile: hostRemoveFile, setConnectionStatus })(ShareHost);\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React from 'react';\r\n\r\nimport css from './ShareClient.module.css';\r\nimport FileList from 'Components/FileList';\r\nimport Header from 'Components/Header';\r\nimport Spinner from 'Components/Spinner';\r\n\r\ninterface IShareClientProps {\r\n  files: { id: string; name: string; progress?: number }[];\r\n  requestFile: (id: string) => void;\r\n  connectionStatus: RTCIceConnectionState;\r\n}\r\n\r\nconst ShareClient: React.FC<IShareClientProps> = ({ files, requestFile, connectionStatus }) => {\r\n  if (connectionStatus !== 'connected') {\r\n    return (\r\n      <>\r\n        <Header main=\"Connecting\" lead=\"\" />\r\n        <div className={css.spinner}>\r\n          <Spinner />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header main=\"Download files\" lead=\"click on file to start download\" />\r\n      <div className={css.connectionBox}>\r\n        <div className={css.connectionStatus}>You are connected</div>\r\n      </div>\r\n      <main className={css.container}>\r\n        <h2 className={css.heading}>Files</h2>\r\n        {Object.keys(files).length ? <FileList files={files} onFileClick={requestFile} iconOnHover=\"file-download\" /> : <h3 className={css.noFiles}>There's no files yet :(</h3>}\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShareClient;\r\n","import ShareClient from './ShareClient';\r\n\r\nexport default ShareClient;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { clientAddFiles, clientRemoveFile, setDownloadProgress, saveFileData, setConnectionStatus } from 'lib/redux';\r\nimport { tryParseJSON, saveFile } from 'lib/helpers';\r\n\r\nimport Share from 'Components/ShareClient';\r\n\r\ninterface ISShareClientProps {\r\n  connection: WebRTCWithFileChannel;\r\n  connectionStatus: RTCIceConnectionState;\r\n  files: IClientFileStorage;\r\n  addFiles: typeof clientAddFiles;\r\n  removeFile: typeof clientRemoveFile;\r\n  setDownloadProgress: typeof setDownloadProgress;\r\n  saveFileData: typeof saveFileData;\r\n  setConnectionStatus: typeof setConnectionStatus;\r\n}\r\n\r\nconst ShareClient: React.FC<ISShareClientProps> = ({ connection, connectionStatus, files, addFiles, removeFile, setDownloadProgress, saveFileData, setConnectionStatus }) => {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    connection.onMessage = (msg) => {\r\n      const obj = tryParseJSON(msg);\r\n      if (!obj) return;\r\n      switch (obj.action) {\r\n        case 'addFiles':\r\n          return addFiles(obj.files);\r\n        case 'removeFile':\r\n          return removeFile(obj.id);\r\n      }\r\n    };\r\n  }, [connection, addFiles, removeFile]);\r\n\r\n  useEffect(() => {\r\n    connection.onFileProgress = ({ downloaded, id }) => setDownloadProgress(id, downloaded);\r\n    connection.onConnection = (status) => {\r\n      setConnectionStatus(status);\r\n      if (status === 'disconnected') history.push('/');\r\n    };\r\n  }, [connection, setDownloadProgress, setConnectionStatus, history]);\r\n\r\n  useEffect(() => {\r\n    connection.onFile = (file, info) => {\r\n      saveFileData(info.id, file);\r\n      saveFile(file, info.name);\r\n    };\r\n  }, [connection, saveFileData]);\r\n\r\n  useEffect(() => {\r\n    const handleDragOver = (evt: DragEvent) => {\r\n      evt.preventDefault();\r\n      if (evt.dataTransfer) evt.dataTransfer.dropEffect = 'none';\r\n    };\r\n    const handleDrop = (evt: DragEvent) => evt.preventDefault();\r\n\r\n    window.addEventListener('dragover', handleDragOver);\r\n    window.addEventListener('drop', handleDrop);\r\n\r\n    return () => {\r\n      window.removeEventListener('dragover', handleDragOver);\r\n      window.removeEventListener('drop', handleDrop);\r\n    };\r\n  }, []);\r\n\r\n  const handleRequestFile = useCallback(\r\n    (id: string) => {\r\n      const file = files[id];\r\n      if (file.file) return saveFile(file.file, file.name);\r\n      if (file.downloadedSize) return;\r\n\r\n      setDownloadProgress(id, 1);\r\n      connection.requestFile(id);\r\n    },\r\n    [connection, files, setDownloadProgress],\r\n  );\r\n\r\n  const filesList = Object.keys(files).map((id) => {\r\n    const file = files[id];\r\n    const fileInfo: { id: string; name: string; progress?: number } = { id, name: file.name };\r\n    if (file.downloadedSize) fileInfo.progress = (file.downloadedSize / file.size) * 100;\r\n    return fileInfo;\r\n  });\r\n\r\n  return <Share files={filesList} requestFile={handleRequestFile} connectionStatus={connectionStatus} />;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => ({ files: state.clientFiles, connectionStatus: state.connection.status });\r\n\r\nexport default connect(mapStateToProps, {\r\n  addFiles: clientAddFiles,\r\n  removeFile: clientRemoveFile,\r\n  setDownloadProgress,\r\n  saveFileData,\r\n  setConnectionStatus,\r\n})(ShareClient);\r\n","import Share from './Share';\r\n\r\nexport default Share;\r\n","import React from 'react';\r\nimport { useHistory, useParams, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ShareHost from 'Containers/ShareHost';\r\nimport ShareClient from 'Containers/ShareClient';\r\nimport { WebRTCWithFileChannel } from 'lib/webrtc';\r\nimport { FirestoreConnection } from 'lib/firebase';\r\nimport { clientSetConnection } from 'lib/redux';\r\n\r\ninterface IShareProps {\r\n  isHost: boolean;\r\n  connection: WebRTCWithFileChannel | undefined;\r\n  clientSetConnection: typeof clientSetConnection;\r\n}\r\n\r\nconst Share: React.FC<IShareProps> = ({ isHost, connection, clientSetConnection }) => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  if (connection) {\r\n    return isHost ? <ShareHost connection={connection} /> : <ShareClient connection={connection} />;\r\n  }\r\n\r\n  if (isHost || !id) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  const newConnection = new WebRTCWithFileChannel();\r\n  const firebaseConnection = new FirestoreConnection();\r\n\r\n  clientSetConnection(newConnection);\r\n\r\n  firebaseConnection\r\n    .getOffer(id)\r\n    .then((offer) => {\r\n      if (!offer) throw new Error(`Can't get offer`);\r\n      return newConnection.connect(offer);\r\n    })\r\n    .then((answer) => firebaseConnection.sendAnswer(id, answer))\r\n    .catch(() => history.replace('/'));\r\n\r\n  return <div>Loading...</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    isHost: state.connection.isHost,\r\n    connection: state.connection.connection,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { clientSetConnection })(Share);\r\n","import React from 'react';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\n\r\nimport Home from 'Pages/Home';\r\nimport Share from 'Pages/Share';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter hashType=\"noslash\">\r\n        <Switch>\r\n          <Route path=\"/:id\">\r\n            <Share />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'lib/redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}